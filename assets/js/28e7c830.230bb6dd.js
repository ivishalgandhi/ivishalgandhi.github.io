"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8019],{7020:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>m});var t=n(7462),s=(n(7294),n(3905));n(1839);const a={slug:"mongodb-rs-docker-persistent-volume",title:"MongoDB Replicaset with Persistent Volume using Docker Compose",authors:{name:"Vishal Gandhi",url:"https://github.com/ivishalgandhi",image_url:"https://github.com/ivishalgandhi.png"},tags:["mongodb","docker","replicaset","persistent-volume"]},i=void 0,r={permalink:"/mongodb-rs-docker-persistent-volume",source:"@site/blog/2021-09-18-mongodb-rs-docker-persistent-volume.md",title:"MongoDB Replicaset with Persistent Volume using Docker Compose",description:"In this article we will see the steps required to create and configure MongoDB replicaset containers on persistent volumes using Docker Compose. Compose was developed to define, configure and spin-up multi-container docker applications with single command, further reducing . Extensive usage of Docker with several container management quickly becomes cumbersome, Compose overcomes this problem and allows to easily handle multiple containers at once using YAML configuration docker-compose.yml",date:"2021-09-18T00:00:00.000Z",formattedDate:"September 18, 2021",tags:[{label:"mongodb",permalink:"/tags/mongodb"},{label:"docker",permalink:"/tags/docker"},{label:"replicaset",permalink:"/tags/replicaset"},{label:"persistent-volume",permalink:"/tags/persistent-volume"}],readingTime:2.795,hasTruncateMarker:!0,authors:[{name:"Vishal Gandhi",url:"https://github.com/ivishalgandhi",image_url:"https://github.com/ivishalgandhi.png",imageURL:"https://github.com/ivishalgandhi.png"}],frontMatter:{slug:"mongodb-rs-docker-persistent-volume",title:"MongoDB Replicaset with Persistent Volume using Docker Compose",authors:{name:"Vishal Gandhi",url:"https://github.com/ivishalgandhi",image_url:"https://github.com/ivishalgandhi.png",imageURL:"https://github.com/ivishalgandhi.png"},tags:["mongodb","docker","replicaset","persistent-volume"]},prevItem:{title:"Configure Sharding in MongoDB on Docker Containers",permalink:"/sharding-mongo-docker"},nextItem:{title:"Create MongoDB Standalone and Replica Set containers using Docker",permalink:"/create-mongodb-docker"}},l={authorsImageUrls:[void 0]},m=[{value:"Docker Compose Steps",id:"docker-compose-steps",level:2},{value:"Step 1: System Configuration",id:"step-1-system-configuration",level:3},{value:"Step 2: Ensure mongo_net network bridge is already existing",id:"step-2-ensure-mongo_net-network-bridge-is-already-existing",level:3},{value:"Step 3: Lets convert the below command as seen in previous blog post to docker-compose.yml. If you are new to Docker and drafting compose files try using composerize to convert docker run commands into compose YAML output",id:"step-3-lets-convert-the-below-command-as-seen-in-previous-blog-post-to-docker-composeyml-if-you-are-new-to-docker-and-drafting-compose-files-try-using-composerize-to-convert-docker-run-commands-into-compose-yaml-output",level:3},{value:"Step 4: create mongod.conf",id:"step-4-create-mongodconf",level:3},{value:"Step 5: Spin-up replicaset containers",id:"step-5-spin-up-replicaset-containers",level:3},{value:"Step 6: Initiate replicaset",id:"step-6-initiate-replicaset",level:3}],d={toc:m};function c(e){let{components:o,...n}=e;return(0,s.kt)("wrapper",(0,t.Z)({},d,n,{components:o,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In this article we will see the steps required to create and configure MongoDB replicaset containers on ",(0,s.kt)("strong",{parentName:"p"},"persistent volumes")," using ",(0,s.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"Docker Compose"),". Compose was developed to define, configure and spin-up multi-container docker applications with single command, further reducing . Extensive usage of Docker with several container management quickly becomes cumbersome, Compose overcomes this problem and allows to easily handle multiple containers at once using YAML configuration ",(0,s.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")),(0,s.kt)("h2",{id:"docker-compose-steps"},"Docker Compose Steps"),(0,s.kt)("h3",{id:"step-1-system-configuration"},"Step 1: System Configuration"),(0,s.kt)("p",null,"To run Compose, make sure you have installed Compose on your local system where Docker is installed. The Compose setup and installation instructions can be found here."),(0,s.kt)("h3",{id:"step-2-ensure-mongo_net-network-bridge-is-already-existing"},"Step 2: Ensure mongo_net network bridge is already existing"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"$ docker network create mongo_net\n$ docker network inspect mongo_net                       \n")),(0,s.kt)("h3",{id:"step-3-lets-convert-the-below-command-as-seen-in-previous-blog-post-to-docker-composeyml-if-you-are-new-to-docker-and-drafting-compose-files-try-using-composerize-to-convert-docker-run-commands-into-compose-yaml-output"},"Step 3: Lets convert the below command as seen in previous blog post to docker-compose.yml. If you are new to Docker and drafting compose files try using composerize to convert docker run commands into compose YAML output"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"$ docker run -d -p 20003:27017 --name mongo3 --network mongo_net mongo:4.4.9-rc0 mongod --replSet rs_mongo\n")),(0,s.kt)("p",null,"There are few additional attributes passed in the ",(0,s.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),". The difference in the options passed in the command line above and ",(0,s.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," is as below"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"image: custom image uploaded to docker hub with additional utilities installed on ubuntu build\nhostname: container host name"),(0,s.kt)("li",{parentName:"ul"},"volumes: map directory on the host file system to manage and store container data. In the below YAML i use separate directory for all 3 MongoDB replicaset. This helps in creating persistent data store for docker containers and doesn\u2019t bloat the container runtime instance."),(0,s.kt)("li",{parentName:"ul"},"Pass mongod configuration options through file mongod.conf")),(0,s.kt)("p",null,"Create the below YAML compose file in your favourite editor, i have been using Visual Studio Code. Save the file as docker-compose.yml"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"$ code .\n\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'#version: "3.3"\nservices:\n  mongo_1:\n    image: ivishalgandhi/mongo-custom:latest\n    hostname: mongo_1\n    container_name: mongo_1\n    volumes:\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_1/mongod.conf:/etc/mongod.conf\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_1/initdb.d/:/docker-entrypoint-initdb.d/\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_1/data/db/:/data/db/\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_1/log/:/var/log/mongodb/\n    ports:\n      - 20003:27017\n    command: ["-f", "/etc/mongod.conf","--replSet", "rs_mongo"]\n    network_mode: mongo_net\n \n  mongo_2:\n    image: ivishalgandhi/mongo-custom:latest\n    hostname: mongo_2\n    container_name: mongo_2\n    volumes:\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_2/mongod.conf:/etc/mongod.conf\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_2/initdb.d/:/docker-entrypoint-initdb.d/\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_2/data/db/:/data/db/\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_2/log/:/var/log/mongodb/\n    ports:\n      - 20004:27017\n    command: ["-f", "/etc/mongod.conf","--replSet", "rs_mongo"]\n    network_mode: mongo_net\n \n  mongo_3:\n    image: ivishalgandhi/mongo-custom:latest\n    hostname: mongo_3\n    container_name: mongo_3\n    volumes:\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_3/mongod.conf:/etc/mongod.conf\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_3/initdb.d/:/docker-entrypoint-initdb.d/\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_3/data/db/:/data/db/\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_3/log/:/var/log/mongodb/\n    ports:\n      - 20005:27017\n    command: ["-f", "/etc/mongod.conf","--replSet", "rs_mongo"]\n    network_mode: mongo_net\n\n')),(0,s.kt)("h3",{id:"step-4-create-mongodconf"},"Step 4: create mongod.conf"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$  code .\n\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-YAML"},"# mongod.conf\n \n# for documentation of all options, see:\n#   http://docs.mongodb.org/manual/reference/configuration-options/\n \n# where to write logging data.\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n \n# Where and how to store data.\nstorage:\n  dbPath: /data/db\n  journal:\n    enabled: true\n  engine:  wiredTiger\n \n# network interfaces\nnet:\n  port: 27017\n  bindIp: 127.0.0.1  \n")),(0,s.kt)("h3",{id:"step-5-spin-up-replicaset-containers"},"Step 5: Spin-up replicaset containers"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"$ docker compose up -d\n[+] Running 3/3\n \u283f Container mongo_2  Created                                                                                                                                   0.2s\n \u283f Container mongo_1  Created                                                                                                                                     0.2s\n \u283f Container mongo_3  Created\n")),(0,s.kt)("h3",{id:"step-6-initiate-replicaset"},"Step 6: Initiate replicaset"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'$ docker exec -it mongo_1 bash\n\nroot@mongo_1:/# mongo\nrs_mongo:SECONDARY> rs.initiate(\n   {\n      _id: \u201crs_mongo\u201d,\n      version: 1,\n      members: [\n         { _id: 0, host : \u201cmongo_1:27017\u201d },\n         { _id: 1, host : \u201cmongo_2:27017\u201d },\n         { _id: 2, host : \u201cmongo_3:27017\u201d }\n      ]\n   }\n)\n \nrs_mongo:SECONDARY> db.isMaster() \n{\n    "topologyVersion" : {\n        "processId" : ObjectId("614615744d54c08963ef67f6"),\n        "counter" : NumberLong(6)\n    },\n    "hosts" : [\n        "mongo_1:27017",\n        "mongo_2:27017",\n        "mongo_3:27017"\n    ],\n    "setName" : "rs_mongo",\n    "setVersion" : 1,\n    "ismaster" : true,\n    "secondary" : false,\n    "primary" : "mongo_2:27017",\n    "me" : "mongo_2:27017",\n\n')))}c.isMDXComponent=!0}}]);