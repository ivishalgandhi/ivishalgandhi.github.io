"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"local-home-lab","metadata":{"permalink":"/blog/local-home-lab","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-04-10-local-home-lab.md","source":"@site/blog/2022-04-10-local-home-lab.md","title":"Local Home Lab DNS Setup with DNSMasq and NGINX","description":"As I explored and set up an increased number of FOSS software using containers(Docker and LXD) and virtual machines(Multipass) in my home lab environment, I realized the difficulty in remembering the different ports the applications and containers are running. The solution to address this problem was to have a Domain Name System for the local network, which works to resolve local and external addresses with a reverse proxy to redirect calls based on DNS resolution.","date":"2022-04-10T00:00:00.000Z","formattedDate":"April 10, 2022","tags":[{"label":"reverse-proxy","permalink":"/blog/tags/reverse-proxy"},{"label":"NGINX","permalink":"/blog/tags/nginx"},{"label":"DNSMASQ","permalink":"/blog/tags/dnsmasq"},{"label":"Lab","permalink":"/blog/tags/lab"}],"readingTime":3.34,"hasTruncateMarker":true,"authors":[{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"}],"frontMatter":{"slug":"local-home-lab","title":"Local Home Lab DNS Setup with DNSMasq and NGINX","authors":{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"},"tags":["reverse-proxy","NGINX","DNSMASQ","Lab"]}},"content":"As I explored and set up an increased number of FOSS software using containers(Docker and LXD) and virtual machines(Multipass) in my home lab environment, I realized the difficulty in remembering the different ports the applications and containers are running. The solution to address this problem was to have a Domain Name System for the local network, which works to resolve local and external addresses with a reverse proxy to redirect calls based on DNS resolution.\\n\\n\x3c!--truncate--\x3e\\n\\n\\nThe below command lists the Docker Containers and ports the container are running on, the requirement is to create a domain for a home setup with domain homelab.net and access the containerized applications with appsmith.homelab.net; typesense.homelab.net; excalidraw.homelab.net\\n\\nLet\u2019s get the list of docker containers with port numbers\\n\\n```shell\\n# get container names and port numbers\\n$ docker container ls --format \\"table {{.ID}}\\\\t{{.Names}}\\\\t{{.Ports}}\\" -a\\n\\n\\nCONTAINER ID   NAMES                        PORTS\\ncbb2ac402270   appsmith                     0.0.0.0:9001->9001/tcp, 0.0.0.0:70->80/tcp, 0.0.0.0:444->443/tcp\\nc9875323b989   typesense_typesense-1_1      0.0.0.0:8108->8108/tcp\\nc453288c8496   excalidraw                   0.0.0.0:3001->80/tcp\\n5be5d33f1f50   k8s-control-plane            127.0.0.1:34589->6443/tcp\\n4140d2fbf7d5   mysql_nocodb_1               0.0.0.0:8082->8080/tcp\\ne7310461bee9   mysql_root_db_1              3306/tcp, 33060/tcp\\n9b56c33d45d5   meilisearch_ms_1             0.0.0.0:7700->7700/tcp\\n9ac6a0e16b0e   mongo2                       0.0.0.0:20002->27017/tcp\\n2aaf01d2233f   mongo1                       0.0.0.0:20001->27017/tcp\\n860b521f97dc   mongo3                       0.0.0.0:20003->27017/tcp\\nd8ad1ec3cab8   rethinkdb_rethinkdb_1        0.0.0.0:28015->28015/tcp, 0.0.0.0:29015->29015/tcp, 0.0.0.0:8081->8080/tcp\\n```\\n\\nThe containers and applications running on the local home network as shown above do not have a public domain name, the option was to look for setting up a DNS server with [DNSMasq](https://thekelleys.org.uk/dnsmasq/doc.html), and a reverse proxy using [NGINX](https://www.nginx.com/). The containers may not be the only use case scenario for local DNS servers with [DNSMasq](https://thekelleys.org.uk/dnsmasq/doc.html), there could be many others like accessing a local file share across devices; accessing applications from a mobile device, and sharing a printer.\\n\\n\\n[DNSMasq](https://thekelleys.org.uk/dnsmasq/doc.html) - Dnsmasq provides network infrastructure for small networks: DNS, DHCP, router advertisement, and network boot. It is designed to be lightweight and has a small footprint, suitable for resource-constrained routers and firewalls.\\n\\n[NGINX](https://www.nginx.com/) - Reverse Proxy \u2013 A reverse proxy provides an additional level of abstraction and control to ensure the smooth flow of network traffic between clients and servers.\\n\\n**Let us get started with the implementation steps for DNSMasq and NGINX. The below steps are performed on Ubuntu 20.04 (Debian-based distro).**\\n\\nBefore starting the installation of DNSMasq, \\n\\n### Step 1: disable systemd-resolve which binds to port 53, the default port for DNSMasq\\n\\n```shell\\n\\n sudo systemctl stop systemd-resolved\\n sudo systemctl disable systemd-resolved\\n\\n```\\n\\n### Step 2: Install DNSUtils, DNSMasq\\n\\n```shell\\nsudo apt update && sudo apt install dnsmasq && sudo apt install dnsutils\\n```\\n\\n### Step 3: Create the DNSMasq configuration file\\n\\n```shell\\n$ dnsmasq_conf=\\"no-dhcp-interface=enp2s0f0\\nbogus-priv\\ndomain=homelab.net\\nexpand-hosts\\nlocal=/homelab.net/\\ndomain-needed\\nno-resolv\\nno-poll\\nserver=8.8.8.8\\nserver=8.8.4.4\\"\\n\\n$ sudo echo -e \\"$dnsmasq_conf\\" > /etc/dnsmasq.d/home-lab.net \\n\\n$ sudo systemctl restart dnsmasq\\n```\\n\\n\\n### Step 4: Add container DNS records in the file./etc/hosts. The records in the hosts file will be used by DNSMasq for client responses\\n\\n```shell\\n  $ sudo nano /etc/hosts  \\n  # add the below records to the hosts file\\n  #Container DNS records\\n  # appsmith\\n  192.168.20.113 appsmith\\n  # excalidraw\\n  192.168.20.113 excalidraw\\n  # typesense\\n  192.168.20.113 typesense\\n```\\n\\n### Step 5: Restart DNSMasq service\\n\\n```shell\\n$ sudo systemctl restart dnsmasq.service\\n```\\n\\n### Step 6: Install NGINX\\n\\n```shell\\n$ sudo apt update && sudo apt install nginx\\n```\\n\\n\\n### Step 6: To enable reverse proxy feature, create a new NGINX configuration file in `sites-enabled` directory\\n\\n```shell\\n $ sudo nano /etc/nginx/sites-enabled/homelab.conf\\n  server {\\n          listen 80;\\n          listen [::]:80;\\n          server_name typesense.homelab.net;\\n          location / {\\n                   proxy_bind 192.168.20.113;\\n                   proxy_pass http://localhost:3000;\\n          }\\n  }\\n  server {\\n          listen 80;\\n          listen [::]:80;\\n          server_name appsmith.homelab.net;\\n          location / {\\n                  proxy_bind 192.168.20.113;\\n                  proxy_pass http://localhost:70;\\n          }\\n\\n  }\\n  server {\\n          listen 80;\\n          listen [::]:80;\\n          server_name excalidraw.homelab.net;\\n          location / {\\n                  proxy_bind 192.168.20.113;\\n                  proxy_pass http://localhost:3001;\\n          }\\n\\n  }\\n```\\n\\nThe `proxy_pass` argument will forward all incoming client requests to app.homelab.net to the respective app. The IP address and port number can be easily changed.\\n \\n### Step 7 reload NGINX for the configuration to take into effect\\n```shell \\n$ sudo systemctl reload nginx\\n```\\nAfter a successful implementation, we will be able to access container applications using domain URLs as seen in the below screenshot with three panes first pane is appsmith ; second pane is excalidraw and third pane is typesense.\\n\\n![local-home-lab-snapshot](2022-07-19-23-09-57.png)"}]}')}}]);