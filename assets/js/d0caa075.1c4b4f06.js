(self.webpackChunk=self.webpackChunk||[]).push([[6503],{67240:(n,o,e)=>{"use strict";e.r(o),e.d(o,{assets:()=>g,contentTitle:()=>d,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var t=e(87462),a=(e(67294),e(3905)),s=e(93456);const r={slug:"sharding-mongo-docker",title:"Configure Sharding in MongoDB on Docker Containers",authors:{name:"Vishal Gandhi",url:"https://github.com/ivishalgandhi",image_url:"https://github.com/ivishalgandhi.png"},tags:["mongodb","docker","sharding"]},d=void 0,i={permalink:"/sharding-mongo-docker",source:"@site/blog/2021-10-02-sharding-mongo-docker.md",title:"Configure Sharding in MongoDB on Docker Containers",description:"In my previous blog post, I posted about configuring Replica Set to meet high availability requirements.",date:"2021-10-02T00:00:00.000Z",formattedDate:"October 2, 2021",tags:[{label:"mongodb",permalink:"/tags/mongodb"},{label:"docker",permalink:"/tags/docker"},{label:"sharding",permalink:"/tags/sharding"}],readingTime:7.095,hasTruncateMarker:!0,authors:[{name:"Vishal Gandhi",url:"https://github.com/ivishalgandhi",image_url:"https://github.com/ivishalgandhi.png",imageURL:"https://github.com/ivishalgandhi.png"}],frontMatter:{slug:"sharding-mongo-docker",title:"Configure Sharding in MongoDB on Docker Containers",authors:{name:"Vishal Gandhi",url:"https://github.com/ivishalgandhi",image_url:"https://github.com/ivishalgandhi.png",imageURL:"https://github.com/ivishalgandhi.png"},tags:["mongodb","docker","sharding"]},prevItem:{title:"Local Home Lab DNS Setup with DNSMasq and NGINX",permalink:"/local-home-lab"},nextItem:{title:"MongoDB Replicaset with Persistent Volume using Docker Compose",permalink:"/mongodb-rs-docker-persistent-volume"}},g={authorsImageUrls:[void 0]},m=[{value:"Replica Set vs Sharding",id:"replica-set-vs-sharding",level:2},{value:"MongoDB Sharding Components",id:"mongodb-sharding-components",level:2},{value:"Steps to create MongoDB Sharded Cluster using Docker Compose",id:"steps-to-create-mongodb-sharded-cluster-using-docker-compose",level:2},{value:"Step 1 - Author Docker Compose file",id:"step-1---author-docker-compose-file",level:3},{value:"Step 2 - Draft Config Server configuration file (pass clusterRole: configsvr to indicate this server is Config Server)",id:"step-2---draft-config-server-configuration-file-pass-clusterrole-configsvr-to-indicate-this-server-is-config-server",level:3},{value:"Step 3 - Draft Query Router mongos configuration file (pass configDB:config server list)",id:"step-3---draft-query-router-mongos-configuration-file-pass-configdbconfig-server-list",level:3},{value:"Step 4 - Copy mongod.conf and mongos.conf to the path mentioned in step 1 <code>docker-compose.yaml</code>",id:"step-4---copy-mongodconf-and-mongosconf-to-the-path-mentioned-in-step-1-docker-composeyaml",level:3},{value:"Step 5 - Spin up Config Server, mongos, all mongod nodes",id:"step-5---spin-up-config-server-mongos-all-mongod-nodes",level:3},{value:"Step 6 - Connect to config server and add config server in a Replica Set",id:"step-6---connect-to-config-server-and-add-config-server-in-a-replica-set",level:3},{value:"Step 7 -  Add all data nodes to replicaset",id:"step-7----add-all-data-nodes-to-replicaset",level:3},{value:"Step 8 \u2013 Connect to mongos and convert data replicaset nodes to shards",id:"step-8--connect-to-mongos-and-convert-data-replicaset-nodes-to-shards",level:3},{value:"Step 9 \u2013 Connect to mongos and enable sharding on a test database \u201cEmployee\u201d",id:"step-9--connect-to-mongos-and-enable-sharding-on-a-test-database-employee",level:3},{value:"Step 10 \u2013 Generate test data ; Create an index on the key to be sharded and shard the collection",id:"step-10--generate-test-data--create-an-index-on-the-key-to-be-sharded-and-shard-the-collection",level:3},{value:"Step 11 \u2013 Validate sharding status",id:"step-11--validate-sharding-status",level:3},{value:"Step 12 - Validate chunk distribution",id:"step-12---validate-chunk-distribution",level:3}],c={toc:m};function l(n){let{components:o,...e}=n;return(0,a.kt)("wrapper",(0,t.Z)({},c,e,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In my previous ",(0,a.kt)("a",{parentName:"p",href:"/mongodb-rs-docker-persistent-volume"},"blog")," post, I posted about configuring Replica Set to meet high availability requirements. "),(0,a.kt)("p",null,"In this post, i cover "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"MongoDB Sharded Cluster Components "),(0,a.kt)("li",{parentName:"ul"},"Steps to create MongoDB Sharded Cluster using Docker Compose"),(0,a.kt)("li",{parentName:"ul"},"Add Replica Set as a Shard"),(0,a.kt)("li",{parentName:"ul"},"Sharding Data"),(0,a.kt)("li",{parentName:"ul"},"Verify Distribution of Data ")),(0,a.kt)("h2",{id:"replica-set-vs-sharding"},"Replica Set vs Sharding"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Replica Set")," is the way of keeping identical set of data on multiple servers. Sharding refers to the process of splitting data across nodes, also known as horizontal partitioning. "),(0,a.kt)("p",null,"A database ",(0,a.kt)("strong",{parentName:"p"},"shard"),", is a horizontal partition of data in a database,  each node contains different set of the data. "),(0,a.kt)("p",null,"MongoDB supports and implements ",(0,a.kt)("inlineCode",{parentName:"p"},"auto-sharding")," by automating balancing of data across the shards. "),(0,a.kt)("h2",{id:"mongodb-sharding-components"},"MongoDB Sharding Components"),(0,a.kt)("p",null,"The first step in creating a Sharded MongoDB cluster is to understand all the components and processes that constitute a cluster "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Query Router - mongos"))),(0,a.kt)("p",null,"mongos is the routing process. The goal of sharding is to make cluster of 100-1000 nodes looks like a single interface for the application and abstract all the complexity of data access from multiple shards. The mongos router is table of contents and knows where the  data required by application is located, mongos forwards the application request to appropriate shard(s).   "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Config Servers"))),(0,a.kt)("p",null,"Config Servers hold all the metadata about which node is holding which data(chunks). mongos retrieves all the metadata from Config Servers. Config Servers are critical and its important to configure and bring the config servers first, backup config servers and setup config servers as Replica Set.  "),(0,a.kt)("h2",{id:"steps-to-create-mongodb-sharded-cluster-using-docker-compose"},"Steps to create MongoDB Sharded Cluster using Docker Compose"),(0,a.kt)("p",null,"Below image show different components required to setup MongoDB sharding with Replica Set. The image also shows how application communicates to MongoDB sharded cluster. As discussed in the sharding components application always connects first to mongos and mongos communicates with config server (cfg1, cfg2, cfg3 are part of replicaset in below image)"),(0,a.kt)(s.Mermaid,{config:{},chart:"  stateDiagram-v2\n    [*] --\x3e Application\n    direction LR\n    state Application\n    state QueryRouter \n    {\n   \n   mongos \n   }\n   Application --\x3e QueryRouter : Read\n   QueryRouter --\x3e Application: Results\n    state cfg: config \n    {\n        \n        cfg1 \n        cfg2\n        cfg3\n        \n   }\n    QueryRouter --\x3e config\n    config --\x3e QueryRouter\n   state Shard1: rs_mongo1\n    {\n    shard1_mongo1\n    shard1_mongo2\n    shard1_mongo3\n    }\n    state Shard2: rs_mongo2\n    {\n    shard2_mongo1\n    shard2_mongo2\n    shard2_mongo3\n    }\n    \n    state Shard3: rs_mongo3 \n    {\n     shard3_mongo1\n    shard3_mongo2\n    shard3_mongo3\n    }\n\n    \n      QueryRouter --\x3e rs_mongo1\n    QueryRouter --\x3e rs_mongo2\n    QueryRouter --\x3e rs_mongo3\n    rs_mongo1 --\x3e QueryRouter\n    rs_mongo2 --\x3e QueryRouter\n    rs_mongo3 --\x3e QueryRouter\n ",mdxType:"Mermaid"}),(0,a.kt)("p",null,"Lets setup above MongoDB Sharding Cluster using docker compose"),(0,a.kt)("h3",{id:"step-1---author-docker-compose-file"},"Step 1 - Author Docker Compose file"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Ensure directory path mentioned in docker compose for persistent volume before the \u201c:\u201d is existing on local host")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-YAML"},'services:\n  shard1_mongo1:\n    image: mongo_ssh\n    hostname: shard1_mongo1\n    container_name: shard1_mongo1\n    volumes:\n      - ~/db/shard1_mongo1/mongod.conf:/etc/mongod.conf\n      - ~/db/shard1_mongo1/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/shard1_mongo1/data/db/:/data/db/\n      - ~/db/shard1_mongo1/log/:/var/log/mongodb/\n    ports:\n      - 20005:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n \n  shard1_mongo2:\n    image: mongo_ssh\n    hostname: shard1_mongo2\n    container_name: shard1_mongo2\n    volumes:\n      - ~/db/shard1_mongo2/mongod.conf:/etc/mongod.conf\n      - ~/db/shard1_mongo2/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/shard1_mongo2/data/db/:/data/db/\n      - ~/db/shard1_mongo2/log/:/var/log/mongodb/\n    ports:\n      - 20006:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n \n  shard1_mongo3:\n    image: mongo_ssh\n    hostname: shard1_mongo3\n    container_name: shard1_mongo3\n    volumes:\n      - ~/db/shard1_mongo3/mongod.conf:/etc/mongod.conf\n      - ~/db/shard1_mongo3/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/shard1_mongo3/data/db/:/data/db/\n      - ~/db/shard1_mongo3/log/:/var/log/mongodb/\n    ports:\n      - 20007:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n \n  shard2_mongo1:\n    image: mongo_ssh\n    hostname: shard2_mongo1\n    container_name: shard2_mongo1\n    volumes:\n      - ~/db/shard2_mongo1/mongod.conf:/etc/mongod.conf\n      - ~/db/shard2_mongo1/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/shard2_mongo1/data/db/:/data/db/\n      - ~/db/shard2_mongo1/log/:/var/log/mongodb/\n    ports:\n      - 20008:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n \n  shard2_mongo2:\n    image: mongo_ssh\n    hostname: shard2_mongo2\n    container_name: shard2_mongo2\n    volumes:\n      - ~/db/shard2_mongo2/mongod.conf:/etc/mongod.conf\n      - ~/db/shard2_mongo2/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/shard2_mongo2/data/db/:/data/db/\n      - ~/db/shard2_mongo2/log/:/var/log/mongodb/\n    ports:\n      - 20009:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n \n  shard2_mongo3:\n    image: mongo_ssh\n    hostname: shard2_mongo3\n    container_name: shard2_mongo3\n    volumes:\n      - ~/db/shard2_mongo3/mongod.conf:/etc/mongod.conf\n      - ~/db/shard2_mongo3/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/shard2_mongo3/data/db/:/data/db/\n      - ~/db/shard2_mongo3/log/:/var/log/mongodb/\n    ports:\n      - 20010:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n \n  shard3_mongo1:\n    image: mongo_ssh\n    hostname: shard3_mongo1\n    container_name: shard3_mongo1\n    volumes:\n      - ~/db/shard3_mongo1/mongod.conf:/etc/mongod.conf\n      - ~/db/shard3_mongo1/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/shard3_mongo1/data/db/:/data/db/\n      - ~/db/shard3_mongo1/log/:/var/log/mongodb/\n    ports:\n      - 20011:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n \n  shard3_mongo2:\n    image: mongo_ssh\n    hostname: shard3_mongo2\n    container_name: shard3_mongo2\n    volumes:\n      - ~/db/shard3_mongo2/mongod.conf:/etc/mongod.conf\n      - ~/db/shard3_mongo2/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/shard3_mongo2/data/db/:/data/db/\n      - ~/db/shard3_mongo2/log/:/var/log/mongodb/\n    ports:\n      - 20012:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n \n  shard3_mongo3:\n    image: mongo_ssh\n    hostname: shard3_mongo3\n    container_name: shard3_mongo3\n    volumes:\n      - ~/db/shard3_mongo3/mongod.conf:/etc/mongod.conf\n      - ~/db/shard3_mongo3/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/shard3_mongo3/data/db/:/data/db/\n      - ~/db/shard3_mongo3/log/:/var/log/mongodb/\n    ports:\n      - 20013:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n# MongoDB Confiugration Server \n  cfg1:\n    image: mongo_ssh\n    hostname: cfg1\n    container_name: cfg1\n    volumes:\n      - ~/db/cfg1/mongod.conf:/etc/mongod.conf\n      - ~/db/cfg1/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/cfg1/data/db/:/data/db/\n      - ~/db/cfg1/log/:/var/log/mongodb/\n    ports:\n      - 20014:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n \n  cfg2:\n    image: mongo_ssh\n    hostname: cfg2\n    container_name: cfg2\n    volumes:\n      - ~/db/cfg2/mongod.conf:/etc/mongod.conf\n      - ~/db/cfg2/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/cfg2/data/db/:/data/db/\n      - ~/db/cfg2/log/:/var/log/mongodb/\n    ports:\n      - 20015:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n \n  cfg3:\n    image: mongo_ssh\n    hostname: cfg3\n    container_name: cfg3\n    volumes:\n      - ~/db/cfg3/mongod.conf:/etc/mongod.conf\n      - ~/db/cfg3/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/cfg3/data/db/:/data/db/\n      - ~/db/cfg3/log/:/var/log/mongodb/\n    ports:\n      - 20016:27017\n    command: ["-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n \n  mongos:\n    image: mongo_ssh\n    hostname: mongos\n    container_name: mongos\n    volumes:\n      - ~/db/mongos/mongod.conf:/etc/mongod.conf\n      - ~/db/mongos/initdb.d/:/docker-entrypoint-initdb.d/\n      - ~/db/mongos/data/db/:/data/db/\n      - ~/db/mongos/log/:/var/log/mongodb/\n    ports:\n      - 20017:27017\n    command: ["mongos","-f", "/etc/mongod.conf"]\n    network_mode: mongo_net\n\n\n')),(0,a.kt)("h3",{id:"step-2---draft-config-server-configuration-file-pass-clusterrole-configsvr-to-indicate-this-server-is-config-server"},"Step 2 - Draft Config Server configuration file (pass clusterRole: configsvr to indicate this server is Config Server)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-YAML"},"systemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\nstorage:\n  dbPath: /data/db\n  journal:\n    enabled: true\n  engine:  wiredTiger\nnet:\n  port: 27017\n  bindIp: 127.0.0.1  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.\nsharding:\n  clusterRole: configsvr\nreplication:\n  replSetName: rs_config\n")),(0,a.kt)("h3",{id:"step-3---draft-query-router-mongos-configuration-file-pass-configdbconfig-server-list"},"Step 3 - Draft Query Router mongos configuration file (pass configDB:config server list)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-YAML"},"systemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n \nnet:\n  port: 27017\n  bindIp: 127.0.0.1  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.\n \nsharding:\n  configDB: rs_config/cfg1:27017,cfg2:27017,cfg3:27017\n")),(0,a.kt)("h3",{id:"step-4---copy-mongodconf-and-mongosconf-to-the-path-mentioned-in-step-1-docker-composeyaml"},"Step 4 - Copy mongod.conf and mongos.conf to the path mentioned in step 1 ",(0,a.kt)("inlineCode",{parentName:"h3"},"docker-compose.yaml")),(0,a.kt)("h3",{id:"step-5---spin-up-config-server-mongos-all-mongod-nodes"},"Step 5 - Spin up Config Server, mongos, all mongod nodes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ docker compose up -d\n")),(0,a.kt)("h3",{id:"step-6---connect-to-config-server-and-add-config-server-in-a-replica-set"},"Step 6 - Connect to config server and add config server in a Replica Set"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'rs_config:PRIMARY> rs.initiate() \nrs_config:PRIMARY> rs.add("cfg2:27017")\nrs_config:PRIMARY> rs.add("cfg3:27017")\n')),(0,a.kt)("h3",{id:"step-7----add-all-data-nodes-to-replicaset"},"Step 7 -  Add all data nodes to replicaset"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'# Connect to shard1_mongo1\n \nadmin> rs.initiate()\nrs_mongo1 [direct: primary] admin> rs.add("shard1_mongo2")\nrs_mongo1 [direct: primary] admin> rs.add("shard1_mongo3")\n \n# Connect to shard2_mongo1\n \nadmin> rs.initiate()\nrs_mongo2 [direct: primary] test> rs.add("shard2_mongo2")\nrs_mongo2 [direct: primary] test> rs.add("shard2_mongo3")\n \n# Connect to shard3_mongo1\n \ntest> rs.initiate()\nrs_mongo3 [direct: other] test> rs.add("shard3_mongo2")\nrs_mongo3 [direct: primary] test> rs.add("shard3_mongo3")\n\n')),(0,a.kt)("h3",{id:"step-8--connect-to-mongos-and-convert-data-replicaset-nodes-to-shards"},"Step 8 \u2013 Connect to mongos and convert data replicaset nodes to shards"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'\nmongos>sh.addShard("rs_mongo1/shard1_mongo1:27017,shard1_mongo2:27017,shard1_mongo3:27017")\n \nmongos>sh.addShard("rs_mongo2/shard2_mongo1:27017,shard2_mongo2:27017,shard2_mongo3:27017")\n \nmongos>sh.addShard("rs_mongo3/shard3_mongo1:27017,shard3_mongo2:27017,\n\n')),(0,a.kt)("h3",{id:"step-9--connect-to-mongos-and-enable-sharding-on-a-test-database-employee"},"Step 9 \u2013 Connect to mongos and enable sharding on a test database \u201cEmployee\u201d"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'mongos> db.adminCommand({enableSharding : "employee"})\n')),(0,a.kt)("h3",{id:"step-10--generate-test-data--create-an-index-on-the-key-to-be-sharded-and-shard-the-collection"},"Step 10 \u2013 Generate test data ; Create an index on the key to be sharded and shard the collection"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'mongos> use employee\nswitched to db employee\n \nmongos> for (var i = 0; i < 100000; i++) { db.emp_list2.insert({ "sr_no": "emp # " + i, "create_date": new Date() }); }\n \nmongos> db.emp_list2.ensureIndex({"sr_no" : "hashed"})\n \nmongos> sh.shardCollection("employee.emp_list2", {"sr_no":"hashed"})\n \n{\n    "collectionsharded" : "employee.emp_list2",\n    "collectionUUID" : UUID("17195baa-fc6c-4c3e-8a2b-58fb1278e40c"),\n    "ok" : 1,\n    "operationTime" : Timestamp(1633177398, 26),\n    "$clusterTime" : {\n        "clusterTime" : Timestamp(1633177398, 26),\n        "signature" : {\n            "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),\n            "keyId" : NumberLong(0)\n        }\n    }\n}\n')),(0,a.kt)("h3",{id:"step-11--validate-sharding-status"},"Step 11 \u2013 Validate sharding status"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'\n\nmongos> sh.status()\n--- Sharding Status ---\n  sharding version: {\n    "_id" : 1,\n    "minCompatibleVersion" : 5,\n    "currentVersion" : 6,\n    "clusterId" : ObjectId("6157efd7982782e314f1b651")\n  }\n  shards:\n        {  "_id" : "rs_mongo1",  "host" : "rs_mongo1/shard1_mongo1:27017,shard1_mongo2:27017,shard1_mongo3:27017",  "state" : 1 }\n        {  "_id" : "rs_mongo2",  "host" : "rs_mongo2/shard2_mongo1:27017,shard2_mongo2:27017,shard2_mongo3:27017",  "state" : 1 }\n        {  "_id" : "rs_mongo3",  "host" : "rs_mongo3/shard3_mongo1:27017,shard3_mongo2:27017,shard3_mongo3:27017",  "state" : 1 }\n  active mongoses:\n        "4.4.8" : 1\n  autosplit:\n        Currently enabled: yes\n  balancer:\n        Currently enabled:  yes\n        Currently running:  no\n        Failed balancer rounds in last 5 attempts:  0\n        Migration Results for the last 24 hours:\n                682 : Success\n  databases:\n        {  "_id" : "config",  "primary" : "config",  "partitioned" : true }\n                config.system.sessions\n                        shard key: { "_id" : 1 }\n                        unique: false\n                        balancing: true\n                        chunks:\n                                rs_mongo1   342\n                                rs_mongo2   341\n                                rs_mongo3   341\n                        too many chunks to print, use verbose if you want to force print\n       employee.emp_list2\n                        shard key: { "sr_no" : "hashed" }\n                        unique: false\n                        balancing: true\n                        chunks:\n                                rs_mongo1   2\n                                rs_mongo2   2\n                                rs_mongo3   \n')),(0,a.kt)("h3",{id:"step-12---validate-chunk-distribution"},"Step 12 - Validate chunk distribution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'\nmongos> db.getSiblingDB("employee").emp_list2.getShardDistribution();\n \nShard rs_mongo1 at rs_mongo1/shard1_mongo1:27017,shard1_mongo2:27017,shard1_mongo3:27017\n data : 2.09MiB docs : 33426 chunks : 2\n estimated data per chunk : 1.04MiB\n estimated docs per chunk : 16713\n \nShard rs_mongo3 at rs_mongo3/shard3_mongo1:27017,shard3_mongo2:27017,shard3_mongo3:27017\n data : 2.09MiB docs : 33379 chunks : 2\n estimated data per chunk : 1.04MiB\n estimated docs per chunk : 16689\n \nShard rs_mongo2 at rs_mongo2/shard2_mongo1:27017,shard2_mongo2:27017,shard2_mongo3:27017\n data : 2.08MiB docs : 33195 chunks : 2\n estimated data per chunk : 1.04MiB\n estimated docs per chunk : 16597\n \nTotals\n data : 6.28MiB docs : 100000 chunks : 6\n Shard rs_mongo1 contains 33.42% data, 33.42% docs in cluster, avg obj size on shard : 65B\n Shard rs_mongo3 contains 33.37% data, 33.37% docs in cluster, avg obj size on shard : 65B\n Shard rs_mongo2 contains 33.19% data, 33.19% docs in cluster, avg \n\n')))}l.isMDXComponent=!0},11748:(n,o,e)=>{var t={"./locale":89234,"./locale.js":89234};function a(n){var o=s(n);return e(o)}function s(n){if(!e.o(t,n)){var o=new Error("Cannot find module '"+n+"'");throw o.code="MODULE_NOT_FOUND",o}return t[n]}a.keys=function(){return Object.keys(t)},a.resolve=s,n.exports=a,a.id=11748}}]);