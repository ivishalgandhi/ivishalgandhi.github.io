"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9450],{16029:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"docker-sbom","metadata":{"permalink":"/docker-sbom","source":"@site/blog/2022-07-09-docker-sbom.md","title":"Guide to Software Bill of Materials(SBoM) and Docker SBOM CLI","description":"An Software Bill of Materials (SBoM) is a formal record containing the details and supply chain relationships of various components used in building the software. These components, including libraries and modules, can be proprietary or open source,free or paid and the data can be widely available or access-restricted.","date":"2022-07-09T00:00:00.000Z","formattedDate":"July 9, 2022","tags":[{"label":"docker-desktop","permalink":"/tags/docker-desktop"},{"label":"SBOM","permalink":"/tags/sbom"},{"label":"docker","permalink":"/tags/docker"}],"readingTime":2.895,"hasTruncateMarker":true,"authors":[{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"}],"frontMatter":{"slug":"docker-sbom","title":"Guide to Software Bill of Materials(SBoM) and Docker SBOM CLI","authors":{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"},"tags":["docker-desktop","SBOM","docker"]},"nextItem":{"title":"How to configure Percona MongoDB Replicaset, Percona Backup Manager, Backup Agent using Docker and perform Replicaset backup, restore using S3 compatible object storage \u2013 MINIO","permalink":"/percona-mongo-replicaset-minio"}},"content":"An **Software Bill of Materials (SBoM)** is a formal record containing the details and supply chain relationships of various components used in building the software. These components, including libraries and modules, can be proprietary or open source,free or paid and the data can be widely available or access-restricted.\\n\\n\x3c!--truncate--\x3e\\n\\n![](sbom.webp)\\n\\nSBoM is analogous to a list of ingredients on food packaging. In May 2021, the US President released the [Executive Order](https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/) on improving the Nation\u2019s Cybersecurity. The Software Bill of Materials (SBoM) directly impacts all developers. The SBoM requires third-party software companies to provide customers with the code equivalent of a \u201cnutrition chart.\u201d\\n\\n## When should SBoM be used \u2013 Use cases ?\\n\\n* **Developing products**\\n  * Scan vulnerabilities in the components\\n  * Keep codebase to bare minimum, reduce the number of dependencies and size\\n  * Generate SBoM for end users\\n\\n* **IT Operations**\\n  * Understand operational risk\\n  * Understand potential exploitations\\n  * Real time asset inventory\\n  * Software Selection\\n  * Identify known vulnerabilities and compliance\\n\\n* **EOL**\\n  * Complete visibility to components before evaluation or deploying in production\\n  * Understand the software architecture and the dependencies of the software\\n\\n## Why SBOM ?\\n\\n* Requirement from regulatory bodies to track the components used in the software\\n\\n* Transparency of components getting shipped\\n\\n* Container ecosystem has exploded and the need to track the components getting shipped is a must\\n\\n* Software Vulnerabilities are bugs\\n\\n* Detecting and remediating Vulnerabilities\\n\\n## SBOM Formats\\n\\n* **SPDX (Software Package Data Exchange )**\\n  * Open standard for communicating software bill of material information, including components, licenses, copyrights and security references. Reduces redundant work by providing a common format for organizations and communities to share and use\\n\\n* **CycloneDX**\\n  * Open Web Application Security Project(OWASP) CycloneDX is a lightweight Software Bill of Materials (SBOM) standard designed for use in application security contexts and supply chain component analysis.\\n\\n* **SWID (Software Identification Tags)**\\n  * SWID is used primarily to identify installed software and is the preferred format of the NVD. SWID tags are used in the National Vulnerability Database to describe vulnerable components. The CycloneDX specification compliments this work as CycloneDX documents can incorporate SWID tags and other high-level SWID metadata and optionally include entire SWID documents. Use of SWID tag ID\u2019s are useful in determining if a specific component has known vulnerabilities.\\n\\n## Docker Desktop \u2013 SBOM CLI\\n\\nIn Docker Desktop 4.7.0 Docker introduced and included a new experimental docker sbom CLI that is used for displaying SBoM for any container image. docker sbom scans the layer of container images using the Syft Project\\n\\n## Usage\\n\\n* Display SBOM in CyloneDX format\\n\\n\\n```shell\\n\\t\\n$ docker sbom mongo:latest --format cyclonedx-json | more\\n \\n{\\n      \\"type\\": \\"library\\",\\n      \\"publisher\\": \\"MongoDB Packaging \\\\u003cpackaging@mongodb.com\\\\u003e\\",\\n      \\"name\\": \\"mongodb-org-server\\",\\n      \\"version\\": \\"5.0.9\\",\\n      \\"cpe\\": \\"cpe:2.3:a:mongodb-org-server:mongodb-org-server:5.0.9:*:*:*:*:*:*:*\\",\\n      \\"purl\\": \\"pkg:deb/ubuntu/mongodb-org-server@5.0.9?arch=arm64\\\\u0026upstream=mongodb-org\\\\u0026distro=ubuntu-20.04\\",\\n      \\"properties\\": [\\n        {\\n          \\"name\\": \\"syft:package:foundBy\\",\\n          \\"value\\": \\"dpkgdb-cataloger\\"\\n        },\\n        {\\n          \\"name\\": \\"syft:package:metadataType\\",\\n          \\"value\\": \\"DpkgMetadata\\"\\n        }\\n```\\n\\n* Display SBOM summary of packages. e.g. using the below command we can check for the log4j vulnerabilities\\n\\n```shell\\t\\n$ docker sbom neo4j | grep log4j\\n \\nlog4j-api                           2.17.1                                     java-archive\\nlog4j-core                          2.17.1                                     java-archive\\n\\t\\n$ docker sbom neo4j:4.4.1 | grep log4j\\n \\nlog4j-api                           2.15.0                                     java-archive\\nlog4j-core                          2.15.0                                     java-archive\\n\\t\\n$ docker sbom elasticsearch:7.16.3 | grep log4j\\n \\nelasticsearch-log4j                   7.16.3                             java-archive\\nlog4j-1.2-api                         2.17.1                             java-archive\\nlog4j-api                             2.17.1                             java-archive\\nlog4j-core                            2.17.1                             java-archive\\nlog4j-slf4j-impl                      2.17.1                             java-archive\\n```\\n\\nThere are many benefits to generate SBOM for compliance and vulnerability analysis. Further SBOM can be used for input to open source vulnerability databases like [Snyk](https://github.com/snyk/cli) and open source vulnerability scanning tools like [Grype](https://github.com/anchore/grype)"},{"id":"percona-mongo-replicaset-minio","metadata":{"permalink":"/percona-mongo-replicaset-minio","source":"@site/blog/2022-05-29-percona-mongo-replicaset-minio.md","title":"How to configure Percona MongoDB Replicaset, Percona Backup Manager, Backup Agent using Docker and perform Replicaset backup, restore using S3 compatible object storage \u2013 MINIO","description":"In this blog post, i will walk you through the steps required to containerize Percona Server for MongoDB, Percona Backup Manager, and Agent from source and configure cloud-native S3(Simple Storage Service) compatible distributed object storage MINIO to backup and restore Percona MongoDB snapshot backups.","date":"2022-05-29T00:00:00.000Z","formattedDate":"May 29, 2022","tags":[{"label":"mongodb","permalink":"/tags/mongodb"},{"label":"containers","permalink":"/tags/containers"},{"label":"docker","permalink":"/tags/docker"},{"label":"s3","permalink":"/tags/s-3"},{"label":"minio","permalink":"/tags/minio"},{"label":"pbm","permalink":"/tags/pbm"}],"readingTime":4.205,"hasTruncateMarker":true,"authors":[{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"}],"frontMatter":{"slug":"percona-mongo-replicaset-minio","title":"How to configure Percona MongoDB Replicaset, Percona Backup Manager, Backup Agent using Docker and perform Replicaset backup, restore using S3 compatible object storage \u2013 MINIO","authors":{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"},"tags":["mongodb","containers","docker","s3","minio","pbm"]},"prevItem":{"title":"Guide to Software Bill of Materials(SBoM) and Docker SBOM CLI","permalink":"/docker-sbom"},"nextItem":{"title":"Local Home Lab DNS Setup with DNSMasq and NGINX","permalink":"/local-home-lab"}},"content":"In this blog post, i will walk you through the steps required to containerize [Percona Server for MongoDB](https://github.com/percona/percona-server-mongodb), [Percona Backup Manager](https://github.com/percona/percona-backup-mongodb), and Agent from source and configure cloud-native S3(**S**imple **S**torage **S**ervice) compatible distributed object storage [MINIO](https://min.io/) to backup and restore Percona MongoDB snapshot backups.\\n\\n\x3c!--truncate--\x3e\\n\\n![](minio.webp)\\n\\n## Prerequisites\\nEnsure the below binaries are installed before starting the setup and configuration\\n\\n[Docker](https://www.docker.com/get-started/) or [Podman](https://podman.io/) to containerize Percona MongoDB replicaset and PBM Agent\\n[Docker Compose](https://docs.docker.com/compose/install/)\\n[Golang](https://go.dev/learn/) compiler \u2013 Build Percona Backup Manager binaries\\n[Portainer](https://www.portainer.io/) (Optional) \u2013 Intuitive UI for container configuration and monitoring\\nLet us perform the below steps to set up PSMDB Replicaset; PBM Agent; Minio, S3 compatible bucket, and PBM configuration to perform backups and restores from the bucket.\\n\\n## Steps\\n* Create the Docker environment file with Docker Image, tag, port, and replicaset information. Save the file as .env in the working directory\\n\\n```shell \\nMONGODB_IMAGE=percona/percona-server-mongodb\\nMONGODB_VERSION=5.0\\nMONGO1_PORT=0.0.0.0:15000\\nMONGO2_PORT=0.0.0.0:15001\\nMONGO3_PORT=0.0.0.0:15002\\nMONGODB_PORT=27017\\nMONGODB_DOCKER_NETWORK=mongo_net\\nRS_NAME=rs1\\n\\n```\\n* Create keyFile , Dockerfile and download percona-backup-manager source code in the working directory\\n\\n```shell\\n$ git clone https://github.com/percona/percona-backup-mongodb.git\\n\\nARG MONGODB_VERSION\\nARG MONGODB_IMAGE\\nFROM ${MONGODB_IMAGE}:${MONGODB_VERSION}\\nUSER root\\nCOPY keyFile /opt/keyFile\\nRUN chown mongodb /opt/keyFile && chmod 400 /opt/keyFile && mkdir -p /home/mongodb/ && chown mongodb /home/mongodb\\nUSER mongodb\\n```\\n* Create Docker Compose file\\n\\n```YAML\\nversion: \\"3.8\\"\\nservices:\\n  rs101:\\n    build:\\n      dockerfile: Dockerfile\\n      context: /home/vishal/dev/psmdb\\n      args:\\n        - MONGODB_VERSION=${MONGODB_VERSION}\\n        - MONGODB_IMAGE=${MONGODB_IMAGE}\\n    hostname: rs101\\n    labels:\\n      - \\"com.percona.pbm.app=mongod\\"\\n    environment:\\n      - REPLSET_NAME=rs1\\n      - MONGO_USER=dba\\n      - BACKUP_USER=bcp\\n      - MONGO_PASS=test1234\\n    ports:\\n      - \\"${MONGO1_PORT}:${MONGODB_PORT}\\"\\n    # command: mongod --replSet rs1 --port ${MONGO1_PORT}:27017 --storageEngine wiredTiger --keyFile /opt/keyFile --wiredTigerCacheSizeGB 1\\n    command: [\\"--replSet\\", \\"${RS_NAME}\\", \\"--bind_ip_all\\", \\"--storageEngine\\", \\"wiredTiger\\" , \\"--keyFile\\", \\"/opt/keyFile\\"]\\n    volumes:\\n      - data-rs101:/data/db\\n      - ./scripts/start.sh:/opt/start.sh\\n  rs102:\\n    build:\\n      dockerfile: Dockerfile\\n      context: /home/vishal/dev/psmdb\\n      args:\\n        - MONGODB_VERSION=${MONGODB_VERSION}\\n        - MONGODB_IMAGE=${MONGODB_IMAGE}\\n    hostname: rs102\\n    labels:\\n      - \\"com.percona.pbm.app=mongod\\"\\n    # command: mongod --replSet rs1 --port 27017 --storageEngine wiredTiger --keyFile /opt/keyFile --wiredTigerCacheSizeGB 1\\n    ports:\\n      - \\"${MONGO2_PORT}:${MONGODB_PORT}\\"\\n    command: [\\"--replSet\\", \\"${RS_NAME}\\", \\"--bind_ip_all\\", \\"--storageEngine\\", \\"wiredTiger\\" , \\"--keyFile\\", \\"/opt/keyFile\\"]\\n    volumes:\\n      - data-rs102:/data/db\\n  rs103:\\n    build:\\n      dockerfile: Dockerfile\\n      context: /home/vishal/dev/psmdb\\n      args:\\n        - MONGODB_VERSION=${MONGODB_VERSION}\\n        - MONGODB_IMAGE=${MONGODB_IMAGE}\\n    hostname: rs103\\n    labels:\\n      - \\"com.percona.pbm.app=mongod\\"\\n    # command: mongod --replSet rs1 --port 27017 --storageEngine wiredTiger --keyFile /opt/keyFile --wiredTigerCacheSizeGB 1\\n    ports:\\n      - \\"${MONGO3_PORT}:${MONGODB_PORT}\\"\\n    command: [\\"--replSet\\", \\"${RS_NAME}\\", \\"--bind_ip_all\\", \\"--storageEngine\\", \\"wiredTiger\\" , \\"--keyFile\\", \\"/opt/keyFile\\"]\\n    volumes:\\n      - data-rs103:/data/db\\n  agent-rs101:\\n    container_name: \\"pbmagent_rs101\\"\\n    user: \\"1001\\"\\n    labels:\\n      - \\"com.percona.pbm.app=agent\\"\\n      - \\"com.percona.pbm.agent.rs=rs1\\"\\n    environment:\\n      - \\"PBM_MONGODB_URI=mongodb://${BACKUP_USER:-bcp}:${MONGO_PASS:-test1234}@rs101:27017\\"\\n    build:\\n      labels:\\n        - \\"com.percona.pbm.app=agent\\"\\n      dockerfile: /home/vishal/open-source/percona-backup-mongodb/docker/Dockerfile\\n      context: /home/vishal/open-source/percona-backup-mongodb/\\n      args:\\n        - MONGODB_VERSION=${MONGODB_VERSION:-5.0}\\n    volumes:\\n      - ./conf:/etc/pbm\\n      - ./backups:/opt/backups\\n      - data-rs101:/data/db\\n    command: pbm-agent\\n    cap_add:\\n      - NET_ADMIN\\n  agent-rs102:\\n    container_name: \\"pbmagent_rs102\\"\\n    user: \\"1001\\"\\n    labels:\\n      - \\"com.percona.pbm.app=agent\\"\\n      - \\"com.percona.pbm.agent.rs=rs1\\"\\n    environment:\\n      - \\"PBM_MONGODB_URI=mongodb://${BACKUP_USER:-bcp}:${MONGO_PASS:-test1234}@rs102:27017\\"\\n    build:\\n      labels:\\n        - \\"com.percona.pbm.app=agent\\"\\n      dockerfile: /home/vishal/open-source/percona-backup-mongodb/docker/Dockerfile\\n      context: /home/vishal/open-source/percona-backup-mongodb/\\n      args:\\n        - MONGODB_VERSION=${MONGODB_VERSION:-5.0}\\n    volumes:\\n      - ./conf:/etc/pbm\\n      - ./backups:/opt/backups\\n      - data-rs102:/data/db\\n    command: pbm-agent\\n    cap_add:\\n      - NET_ADMIN\\n  agent-rs103:\\n    container_name: \\"pbmagent_rs103\\"\\n    user: \\"1001\\"\\n    labels:\\n      - \\"com.percona.pbm.app=agent\\"\\n      - \\"com.percona.pbm.agent.rs=rs1\\"\\n    environment:\\n      - \\"PBM_MONGODB_URI=mongodb://${BACKUP_USER:-bcp}:${MONGO_PASS:-test1234}@rs103:27017\\"\\n    build:\\n      labels:\\n        - \\"com.percona.pbm.app=agent\\"\\n      dockerfile: /home/vishal/open-source/percona-backup-mongodb/docker/Dockerfile\\n      context: /home/vishal/open-source/percona-backup-mongodb/\\n      args:\\n        - MONGODB_VERSION=${MONGODB_VERSION:-5.0}\\n    volumes:\\n      - ./conf:/etc/pbm\\n      - ./backups:/opt/backups\\n      - data-rs103:/data/db\\n    command: pbm-agent\\n    cap_add:\\n      - NET_ADMIN\\nvolumes:\\n  backups: null\\n  data-rs101: null\\n  data-rs102: null\\n  data-rs103: null\\n\\n```\\n\\n* Run Docker compose\\nThe below command will build and start the docker container for Percona Server MongoDB Primary Secondary Secondary replicaset and Percona Backup Manager Agent for each replicaset\\n\\n```\\n$ psmdb docker compose -f docker-compose-rs.yaml up -d\\n[+] Running 8/8\\n\u283f Container psmdb-rs102-1 Running 0.0s\\n\u283f Container psmdb-rs103-1 Running 0.0s\\n\u283f Container pbmagent_rs103 Running 0.0s\\n\u283f Container pbmagent_rs102 Running 0.0s\\n\u283f Container psmdb-rs101-1 Running 0.0s\\n\u283f Container pbmagent_rs101 Running 0.0s\\n\\n```\\n\\n* Connect to MongoDB replicaset and ensure replication and containers are working\\n\\n```shell\\n$ mongo \\"mongodb://dba:test1234@192.168.50.113:15000,192.168.50.113:15001,192.168.50.113:15002/admin?replicaSet=rs1\\"\\n```\\n\\n* Setup Minio and Minio CLI\\n\\n```shell\\n\\n$ cd ~/downloads && wget https://dl.min.io/server/minio/release/linux-amd64/minio\\n \\n$ wget https://dl.min.io/client/mc/release/linux-amd64/mc\\nchmod +x mc\\n./mc --help\\n \\n$  downloads ./minio server /home/vishal/data --address=0.0.0.0:7000\\n \\n\\nAPI: http://0.0.0.0:7000 \\nRootUser: minioadmin \\nRootPass: minioadmin \\nFinished loading IAM sub-system (took 0.0s of 0.0s to load data).\\n \\nConsole: http://192.168.50.113:43859 http://192.168.160.1:43859 http://172.18.0.1:43859 http://172.19.0.1:43859 http://172.24.0.1:43859 http://172.26.0.1:43859 http://172.17.0.1:43859 http://127.0.0.1:43859                   \\nRootUser: minioadmin \\nRootPass: minioadmin \\n \\nCommand-line: https://docs.min.io/docs/minio-client-quickstart-guide\\n   $ mc alias set myminio http://0.0.0.0:7000 minioadmin minioadmin\\n \\nDocumentation: https://docs.min.io\\n\\n\\n```\\n\\n* Setup Minio server alias and List buckets\\n\\n```shell\\n$  mc alias set minio-deb http://192.168.50.113:7000 minioadmin minioadmin\\n$  mc ls minio-deb\\n[2022-05-29 14:59:32 IST] 0B nocodb/\\n[2022-05-29 00:19:41 IST] 0B typesense/\\n\\n```\\n\\n* Create a new bucket and name it `pbm`\\n\\n```shell\\n$ mc alias set minio-deb http://192.168.50.113:7000 minioadmin minioadmin\\n$ mc ls minio-deb\\n  [2022-05-29 14:59:32 IST] 0B nocodb/\\n  [2022-05-29 00:19:41 IST] 0B typesense/\\n```\\n\\n* Setup PBM or compile PBM from the source repository\\n\\n```shell\\n$ sudo apt-get install -y libkrb5-dev\\n$ cd percona-backup-mongodb\\n$ make build\\n$ make install\\n```\\n* create pbm_config.YAML to be used for configuring PBM for using MINIO\\n\\n```YAML\\n\\nstorage:\\n    type: s3\\n    s3:\\n      endpointUrl: http://192.168.50.113:7000\\n      bucket: pbm\\n      credentials:\\n        access-key-id: \\"minioadmin\\"\\n        secret-access-key: \\"minioadmin\\"\\n\\n\\n```\\n\\n* Configure PBM\\n\\n```shell\\n$ ./pbm config --file /home/vishal/dev/psmdb/pbm_config.yaml --mongodb-uri=\\"mongodb://bcp:test1234@192.168.50.113:15000/?replSetName=rs1\\"\\n\\n```\\n* Validate agent container logs and run the pbm list command. If MINIO is configured successfully, agent container logs shouldn\u2019t log any errors.\\n\\n```shell\\n2022-05-29T01:31:14.000+0000 D [resync] got backups list: 02022-05-29T01:31:14.000+0000 D [resync] got physical restores list: 0\\n\\n$ bin git:(main) ./pbm list --mongodb-uri=\\"mongodb://bcp:test1234@192.168.50.113:15000/?replSetName=rs1\\"\\nBackup snapshots:\\n2022-05-29T01:29:12Z [complete: 2022-05-29T01:29:16Z]\\n2022-05-29T01:38:38Z [complete: 2022-05-29T01:38:42Z]\\n2022-05-29T04:04:44Z [complete: 2022-05-29T04:04:48Z]\\n```\\n\\n* To run PBM backup and restore execute the below commands\\n\\n```bash \\n$ ./pbm backup --mongodb-uri=\\"mongodb://bcp:test1234@192.168.50.113:15000/?replSetName=rs1\\" \\n$ ./pbm restore 2022-05-29T04:04:44Z --mongodb-uri=\\"mongodb:/\\n```"},{"id":"local-home-lab","metadata":{"permalink":"/local-home-lab","source":"@site/blog/2022-04-10-local-home-lab.md","title":"Local Home Lab DNS Setup with DNSMasq and NGINX","description":"As I explored and set up an increased number of FOSS software using containers(Docker and LXD) and virtual machines(Multipass) in my home lab environment, I realized the difficulty in remembering the different ports the applications and containers are running. The solution to address this problem was to have a Domain Name System for the local network, which works to resolve local and external addresses with a reverse proxy to redirect calls based on DNS resolution.","date":"2022-04-10T00:00:00.000Z","formattedDate":"April 10, 2022","tags":[{"label":"reverse-proxy","permalink":"/tags/reverse-proxy"},{"label":"NGINX","permalink":"/tags/nginx"},{"label":"DNSMASQ","permalink":"/tags/dnsmasq"},{"label":"Lab","permalink":"/tags/lab"}],"readingTime":3.34,"hasTruncateMarker":true,"authors":[{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"}],"frontMatter":{"slug":"local-home-lab","title":"Local Home Lab DNS Setup with DNSMasq and NGINX","authors":{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"},"tags":["reverse-proxy","NGINX","DNSMASQ","Lab"]},"prevItem":{"title":"How to configure Percona MongoDB Replicaset, Percona Backup Manager, Backup Agent using Docker and perform Replicaset backup, restore using S3 compatible object storage \u2013 MINIO","permalink":"/percona-mongo-replicaset-minio"},"nextItem":{"title":"Configure Sharding in MongoDB on Docker Containers","permalink":"/sharding-mongo-docker"}},"content":"As I explored and set up an increased number of FOSS software using containers(Docker and LXD) and virtual machines(Multipass) in my home lab environment, I realized the difficulty in remembering the different ports the applications and containers are running. The solution to address this problem was to have a Domain Name System for the local network, which works to resolve local and external addresses with a reverse proxy to redirect calls based on DNS resolution.\\n\\n\x3c!--truncate--\x3e\\n\\n\\nThe below command lists the Docker Containers and ports the container are running on, the requirement is to create a domain for a home setup with domain homelab.net and access the containerized applications with appsmith.homelab.net; typesense.homelab.net; excalidraw.homelab.net\\n\\nLet\u2019s get the list of docker containers with port numbers\\n\\n```shell\\n# get container names and port numbers\\n$ docker container ls --format \\"table {{.ID}}\\\\t{{.Names}}\\\\t{{.Ports}}\\" -a\\n\\n\\nCONTAINER ID   NAMES                        PORTS\\ncbb2ac402270   appsmith                     0.0.0.0:9001->9001/tcp, 0.0.0.0:70->80/tcp, 0.0.0.0:444->443/tcp\\nc9875323b989   typesense_typesense-1_1      0.0.0.0:8108->8108/tcp\\nc453288c8496   excalidraw                   0.0.0.0:3001->80/tcp\\n5be5d33f1f50   k8s-control-plane            127.0.0.1:34589->6443/tcp\\n4140d2fbf7d5   mysql_nocodb_1               0.0.0.0:8082->8080/tcp\\ne7310461bee9   mysql_root_db_1              3306/tcp, 33060/tcp\\n9b56c33d45d5   meilisearch_ms_1             0.0.0.0:7700->7700/tcp\\n9ac6a0e16b0e   mongo2                       0.0.0.0:20002->27017/tcp\\n2aaf01d2233f   mongo1                       0.0.0.0:20001->27017/tcp\\n860b521f97dc   mongo3                       0.0.0.0:20003->27017/tcp\\nd8ad1ec3cab8   rethinkdb_rethinkdb_1        0.0.0.0:28015->28015/tcp, 0.0.0.0:29015->29015/tcp, 0.0.0.0:8081->8080/tcp\\n```\\n\\nThe containers and applications running on the local home network as shown above do not have a public domain name, the option was to look for setting up a DNS server with [DNSMasq](https://thekelleys.org.uk/dnsmasq/doc.html), and a reverse proxy using [NGINX](https://www.nginx.com/). The containers may not be the only use case scenario for local DNS servers with [DNSMasq](https://thekelleys.org.uk/dnsmasq/doc.html), there could be many others like accessing a local file share across devices; accessing applications from a mobile device, and sharing a printer.\\n\\n\\n[DNSMasq](https://thekelleys.org.uk/dnsmasq/doc.html) - Dnsmasq provides network infrastructure for small networks: DNS, DHCP, router advertisement, and network boot. It is designed to be lightweight and has a small footprint, suitable for resource-constrained routers and firewalls.\\n\\n[NGINX](https://www.nginx.com/) - Reverse Proxy \u2013 A reverse proxy provides an additional level of abstraction and control to ensure the smooth flow of network traffic between clients and servers.\\n\\n**Let us get started with the implementation steps for DNSMasq and NGINX. The below steps are performed on Ubuntu 20.04 (Debian-based distro).**\\n\\nBefore starting the installation of DNSMasq, \\n\\n### Step 1: Disable systemd-resolve which binds to port 53, the default port for DNSMasq\\n\\n```shell\\n\\n sudo systemctl stop systemd-resolved\\n sudo systemctl disable systemd-resolved\\n\\n```\\n\\n### Step 2: Install DNSUtils, DNSMasq\\n\\n```shell\\nsudo apt update && sudo apt install dnsmasq && sudo apt install dnsutils\\n```\\n\\n### Step 3: Create the DNSMasq configuration file\\n\\n```shell\\n$ dnsmasq_conf=\\"no-dhcp-interface=enp2s0f0\\nbogus-priv\\ndomain=homelab.net\\nexpand-hosts\\nlocal=/homelab.net/\\ndomain-needed\\nno-resolv\\nno-poll\\nserver=8.8.8.8\\nserver=8.8.4.4\\"\\n\\n$ sudo echo -e \\"$dnsmasq_conf\\" > /etc/dnsmasq.d/home-lab.net \\n\\n$ sudo systemctl restart dnsmasq\\n```\\n\\n\\n### Step 4: Add container DNS records in the file./etc/hosts. The records in the hosts file will be used by DNSMasq for client responses\\n\\n```shell\\n  $ sudo nano /etc/hosts  \\n  # add the below records to the hosts file\\n  #Container DNS records\\n  # appsmith\\n  192.168.20.113 appsmith\\n  # excalidraw\\n  192.168.20.113 excalidraw\\n  # typesense\\n  192.168.20.113 typesense\\n```\\n\\n### Step 5: Restart DNSMasq service\\n\\n```shell\\n$ sudo systemctl restart dnsmasq.service\\n```\\n\\n### Step 6: Install NGINX\\n\\n```shell\\n$ sudo apt update && sudo apt install nginx\\n```\\n\\n\\n### Step 6: To enable reverse proxy feature, create a new NGINX configuration file in `sites-enabled` directory\\n\\n```shell\\n $ sudo nano /etc/nginx/sites-enabled/homelab.conf\\n  server {\\n          listen 80;\\n          listen [::]:80;\\n          server_name typesense.homelab.net;\\n          location / {\\n                   proxy_bind 192.168.20.113;\\n                   proxy_pass http://localhost:3000;\\n          }\\n  }\\n  server {\\n          listen 80;\\n          listen [::]:80;\\n          server_name appsmith.homelab.net;\\n          location / {\\n                  proxy_bind 192.168.20.113;\\n                  proxy_pass http://localhost:70;\\n          }\\n\\n  }\\n  server {\\n          listen 80;\\n          listen [::]:80;\\n          server_name excalidraw.homelab.net;\\n          location / {\\n                  proxy_bind 192.168.20.113;\\n                  proxy_pass http://localhost:3001;\\n          }\\n\\n  }\\n```\\n\\nThe `proxy_pass` argument will forward all incoming client requests to app.homelab.net to the respective app. The IP address and port number can be easily changed.\\n \\n### Step 7 reload NGINX for the configuration to take into effect\\n```shell \\n$ sudo systemctl reload nginx\\n```\\nAfter a successful implementation, we will be able to access container applications using domain URLs as seen in the below screenshot with three panes first pane is appsmith ; second pane is excalidraw and third pane is typesense.\\n\\n![local-home-lab-snapshot](2022-07-19-23-09-57.png)"},{"id":"sharding-mongo-docker","metadata":{"permalink":"/sharding-mongo-docker","source":"@site/blog/2021-10-02-sharding-mongo-docker.md","title":"Configure Sharding in MongoDB on Docker Containers","description":"In my previous blog post, I posted about configuring Replica Set to meet high availability requirements.","date":"2021-10-02T00:00:00.000Z","formattedDate":"October 2, 2021","tags":[{"label":"mongodb","permalink":"/tags/mongodb"},{"label":"docker","permalink":"/tags/docker"},{"label":"sharding","permalink":"/tags/sharding"}],"readingTime":7.095,"hasTruncateMarker":true,"authors":[{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"}],"frontMatter":{"slug":"sharding-mongo-docker","title":"Configure Sharding in MongoDB on Docker Containers","authors":{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"},"tags":["mongodb","docker","sharding"]},"prevItem":{"title":"Local Home Lab DNS Setup with DNSMasq and NGINX","permalink":"/local-home-lab"},"nextItem":{"title":"MongoDB Replicaset with Persistent Volume using Docker Compose","permalink":"/mongodb-rs-docker-persistent-volume"}},"content":"In my previous [blog](2021-09-18-mongodb-rs-docker-persistent-volume.md) post, I posted about configuring Replica Set to meet high availability requirements. \\n\\nIn this post, i cover \\n\\n* MongoDB Sharded Cluster Components \\n* Steps to create MongoDB Sharded Cluster using Docker Compose\\n* Add Replica Set as a Shard\\n* Sharding Data\\n* Verify Distribution of Data \\n\\n\x3c!--truncate--\x3e\\n\\n## Replica Set vs Sharding \\n\\n**Replica Set** is the way of keeping identical set of data on multiple servers. Sharding refers to the process of splitting data across nodes, also known as horizontal partitioning. \\n\\nA database **shard**, is a horizontal partition of data in a database,  each node contains different set of the data. \\n\\nMongoDB supports and implements `auto-sharding` by automating balancing of data across the shards. \\n\\n\\n\\n\\n## MongoDB Sharding Components \\n\\nThe first step in creating a Sharded MongoDB cluster is to understand all the components and processes that constitute a cluster \\n\\n* **Query Router - mongos**\\n\\nmongos is the routing process. The goal of sharding is to make cluster of 100-1000 nodes looks like a single interface for the application and abstract all the complexity of data access from multiple shards. The mongos router is table of contents and knows where the  data required by application is located, mongos forwards the application request to appropriate shard(s).   \\n\\n* **Config Servers**\\n\\nConfig Servers hold all the metadata about which node is holding which data(chunks). mongos retrieves all the metadata from Config Servers. Config Servers are critical and its important to configure and bring the config servers first, backup config servers and setup config servers as Replica Set.  \\n\\n## Steps to create MongoDB Sharded Cluster using Docker Compose\\n\\nBelow image show different components required to setup MongoDB sharding with Replica Set. The image also shows how application communicates to MongoDB sharded cluster. As discussed in the sharding components application always connects first to mongos and mongos communicates with config server (cfg1, cfg2, cfg3 are part of replicaset in below image)\\n\\n```mermaid\\n  stateDiagram-v2\\n    [*] --\x3e Application\\n    direction LR\\n    state Application\\n    state QueryRouter \\n    {\\n   \\n   mongos \\n   }\\n   Application --\x3e QueryRouter : Read\\n   QueryRouter --\x3e Application: Results\\n    state cfg: config \\n    {\\n        \\n        cfg1 \\n        cfg2\\n        cfg3\\n        \\n   }\\n    QueryRouter --\x3e config\\n    config --\x3e QueryRouter\\n   state Shard1: rs_mongo1\\n    {\\n    shard1_mongo1\\n    shard1_mongo2\\n    shard1_mongo3\\n    }\\n    state Shard2: rs_mongo2\\n    {\\n    shard2_mongo1\\n    shard2_mongo2\\n    shard2_mongo3\\n    }\\n    \\n    state Shard3: rs_mongo3 \\n    {\\n     shard3_mongo1\\n    shard3_mongo2\\n    shard3_mongo3\\n    }\\n\\n    \\n      QueryRouter --\x3e rs_mongo1\\n    QueryRouter --\x3e rs_mongo2\\n    QueryRouter --\x3e rs_mongo3\\n    rs_mongo1 --\x3e QueryRouter\\n    rs_mongo2 --\x3e QueryRouter\\n    rs_mongo3 --\x3e QueryRouter\\n \\n```\\n\\nLets setup above MongoDB Sharding Cluster using docker compose\\n\\n### Step 1 - Author Docker Compose file \\n\\n:::note\\nEnsure directory path mentioned in docker compose for persistent volume before the \u201c:\u201d is existing on local host\\n:::\\n\\n```YAML\\nservices:\\n  shard1_mongo1:\\n    image: mongo_ssh\\n    hostname: shard1_mongo1\\n    container_name: shard1_mongo1\\n    volumes:\\n      - ~/db/shard1_mongo1/mongod.conf:/etc/mongod.conf\\n      - ~/db/shard1_mongo1/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/shard1_mongo1/data/db/:/data/db/\\n      - ~/db/shard1_mongo1/log/:/var/log/mongodb/\\n    ports:\\n      - 20005:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n \\n  shard1_mongo2:\\n    image: mongo_ssh\\n    hostname: shard1_mongo2\\n    container_name: shard1_mongo2\\n    volumes:\\n      - ~/db/shard1_mongo2/mongod.conf:/etc/mongod.conf\\n      - ~/db/shard1_mongo2/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/shard1_mongo2/data/db/:/data/db/\\n      - ~/db/shard1_mongo2/log/:/var/log/mongodb/\\n    ports:\\n      - 20006:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n \\n  shard1_mongo3:\\n    image: mongo_ssh\\n    hostname: shard1_mongo3\\n    container_name: shard1_mongo3\\n    volumes:\\n      - ~/db/shard1_mongo3/mongod.conf:/etc/mongod.conf\\n      - ~/db/shard1_mongo3/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/shard1_mongo3/data/db/:/data/db/\\n      - ~/db/shard1_mongo3/log/:/var/log/mongodb/\\n    ports:\\n      - 20007:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n \\n  shard2_mongo1:\\n    image: mongo_ssh\\n    hostname: shard2_mongo1\\n    container_name: shard2_mongo1\\n    volumes:\\n      - ~/db/shard2_mongo1/mongod.conf:/etc/mongod.conf\\n      - ~/db/shard2_mongo1/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/shard2_mongo1/data/db/:/data/db/\\n      - ~/db/shard2_mongo1/log/:/var/log/mongodb/\\n    ports:\\n      - 20008:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n \\n  shard2_mongo2:\\n    image: mongo_ssh\\n    hostname: shard2_mongo2\\n    container_name: shard2_mongo2\\n    volumes:\\n      - ~/db/shard2_mongo2/mongod.conf:/etc/mongod.conf\\n      - ~/db/shard2_mongo2/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/shard2_mongo2/data/db/:/data/db/\\n      - ~/db/shard2_mongo2/log/:/var/log/mongodb/\\n    ports:\\n      - 20009:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n \\n  shard2_mongo3:\\n    image: mongo_ssh\\n    hostname: shard2_mongo3\\n    container_name: shard2_mongo3\\n    volumes:\\n      - ~/db/shard2_mongo3/mongod.conf:/etc/mongod.conf\\n      - ~/db/shard2_mongo3/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/shard2_mongo3/data/db/:/data/db/\\n      - ~/db/shard2_mongo3/log/:/var/log/mongodb/\\n    ports:\\n      - 20010:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n \\n  shard3_mongo1:\\n    image: mongo_ssh\\n    hostname: shard3_mongo1\\n    container_name: shard3_mongo1\\n    volumes:\\n      - ~/db/shard3_mongo1/mongod.conf:/etc/mongod.conf\\n      - ~/db/shard3_mongo1/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/shard3_mongo1/data/db/:/data/db/\\n      - ~/db/shard3_mongo1/log/:/var/log/mongodb/\\n    ports:\\n      - 20011:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n \\n  shard3_mongo2:\\n    image: mongo_ssh\\n    hostname: shard3_mongo2\\n    container_name: shard3_mongo2\\n    volumes:\\n      - ~/db/shard3_mongo2/mongod.conf:/etc/mongod.conf\\n      - ~/db/shard3_mongo2/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/shard3_mongo2/data/db/:/data/db/\\n      - ~/db/shard3_mongo2/log/:/var/log/mongodb/\\n    ports:\\n      - 20012:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n \\n  shard3_mongo3:\\n    image: mongo_ssh\\n    hostname: shard3_mongo3\\n    container_name: shard3_mongo3\\n    volumes:\\n      - ~/db/shard3_mongo3/mongod.conf:/etc/mongod.conf\\n      - ~/db/shard3_mongo3/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/shard3_mongo3/data/db/:/data/db/\\n      - ~/db/shard3_mongo3/log/:/var/log/mongodb/\\n    ports:\\n      - 20013:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n# MongoDB Confiugration Server \\n  cfg1:\\n    image: mongo_ssh\\n    hostname: cfg1\\n    container_name: cfg1\\n    volumes:\\n      - ~/db/cfg1/mongod.conf:/etc/mongod.conf\\n      - ~/db/cfg1/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/cfg1/data/db/:/data/db/\\n      - ~/db/cfg1/log/:/var/log/mongodb/\\n    ports:\\n      - 20014:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n \\n  cfg2:\\n    image: mongo_ssh\\n    hostname: cfg2\\n    container_name: cfg2\\n    volumes:\\n      - ~/db/cfg2/mongod.conf:/etc/mongod.conf\\n      - ~/db/cfg2/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/cfg2/data/db/:/data/db/\\n      - ~/db/cfg2/log/:/var/log/mongodb/\\n    ports:\\n      - 20015:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n \\n  cfg3:\\n    image: mongo_ssh\\n    hostname: cfg3\\n    container_name: cfg3\\n    volumes:\\n      - ~/db/cfg3/mongod.conf:/etc/mongod.conf\\n      - ~/db/cfg3/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/cfg3/data/db/:/data/db/\\n      - ~/db/cfg3/log/:/var/log/mongodb/\\n    ports:\\n      - 20016:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n \\n  mongos:\\n    image: mongo_ssh\\n    hostname: mongos\\n    container_name: mongos\\n    volumes:\\n      - ~/db/mongos/mongod.conf:/etc/mongod.conf\\n      - ~/db/mongos/initdb.d/:/docker-entrypoint-initdb.d/\\n      - ~/db/mongos/data/db/:/data/db/\\n      - ~/db/mongos/log/:/var/log/mongodb/\\n    ports:\\n      - 20017:27017\\n    command: [\\"mongos\\",\\"-f\\", \\"/etc/mongod.conf\\"]\\n    network_mode: mongo_net\\n\\n\\n```\\n\\n### Step 2 - Draft Config Server configuration file (pass clusterRole: configsvr to indicate this server is Config Server)\\n\\n```YAML\\nsystemLog:\\n  destination: file\\n  logAppend: true\\n  path: /var/log/mongodb/mongod.log\\nstorage:\\n  dbPath: /data/db\\n  journal:\\n    enabled: true\\n  engine:  wiredTiger\\nnet:\\n  port: 27017\\n  bindIp: 127.0.0.1  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.\\nsharding:\\n  clusterRole: configsvr\\nreplication:\\n  replSetName: rs_config\\n```\\n\\n### Step 3 - Draft Query Router mongos configuration file (pass configDB:config server list)\\n\\n```YAML\\nsystemLog:\\n  destination: file\\n  logAppend: true\\n  path: /var/log/mongodb/mongod.log\\n \\nnet:\\n  port: 27017\\n  bindIp: 127.0.0.1  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.\\n \\nsharding:\\n  configDB: rs_config/cfg1:27017,cfg2:27017,cfg3:27017\\n```\\n\\n### Step 4 - Copy mongod.conf and mongos.conf to the path mentioned in step 1 `docker-compose.yaml`\\n\\n### Step 5 - Spin up Config Server, mongos, all mongod nodes\\n\\n```shell \\n$ docker compose up -d\\n```\\n\\n### Step 6 - Connect to config server and add config server in a Replica Set\\n\\n```javascript \\nrs_config:PRIMARY> rs.initiate() \\nrs_config:PRIMARY> rs.add(\\"cfg2:27017\\")\\nrs_config:PRIMARY> rs.add(\\"cfg3:27017\\")\\n```\\n\\n### Step 7 -  Add all data nodes to replicaset\\n\\n```javascript \\n# Connect to shard1_mongo1\\n \\nadmin> rs.initiate()\\nrs_mongo1 [direct: primary] admin> rs.add(\\"shard1_mongo2\\")\\nrs_mongo1 [direct: primary] admin> rs.add(\\"shard1_mongo3\\")\\n \\n# Connect to shard2_mongo1\\n \\nadmin> rs.initiate()\\nrs_mongo2 [direct: primary] test> rs.add(\\"shard2_mongo2\\")\\nrs_mongo2 [direct: primary] test> rs.add(\\"shard2_mongo3\\")\\n \\n# Connect to shard3_mongo1\\n \\ntest> rs.initiate()\\nrs_mongo3 [direct: other] test> rs.add(\\"shard3_mongo2\\")\\nrs_mongo3 [direct: primary] test> rs.add(\\"shard3_mongo3\\")\\n\\n```\\n\\n### Step 8 \u2013 Connect to mongos and convert data replicaset nodes to shards\\n\\n```javascript\\n\\nmongos>sh.addShard(\\"rs_mongo1/shard1_mongo1:27017,shard1_mongo2:27017,shard1_mongo3:27017\\")\\n \\nmongos>sh.addShard(\\"rs_mongo2/shard2_mongo1:27017,shard2_mongo2:27017,shard2_mongo3:27017\\")\\n \\nmongos>sh.addShard(\\"rs_mongo3/shard3_mongo1:27017,shard3_mongo2:27017,\\n\\n```\\n\\n### Step 9 \u2013 Connect to mongos and enable sharding on a test database \u201cEmployee\u201d\\n\\n```javascript\\nmongos> db.adminCommand({enableSharding : \\"employee\\"})\\n```\\n\\n### Step 10 \u2013 Generate test data ; Create an index on the key to be sharded and shard the collection\\n\\n```javascript\\nmongos> use employee\\nswitched to db employee\\n \\nmongos> for (var i = 0; i < 100000; i++) { db.emp_list2.insert({ \\"sr_no\\": \\"emp # \\" + i, \\"create_date\\": new Date() }); }\\n \\nmongos> db.emp_list2.ensureIndex({\\"sr_no\\" : \\"hashed\\"})\\n \\nmongos> sh.shardCollection(\\"employee.emp_list2\\", {\\"sr_no\\":\\"hashed\\"})\\n \\n{\\n    \\"collectionsharded\\" : \\"employee.emp_list2\\",\\n    \\"collectionUUID\\" : UUID(\\"17195baa-fc6c-4c3e-8a2b-58fb1278e40c\\"),\\n    \\"ok\\" : 1,\\n    \\"operationTime\\" : Timestamp(1633177398, 26),\\n    \\"$clusterTime\\" : {\\n        \\"clusterTime\\" : Timestamp(1633177398, 26),\\n        \\"signature\\" : {\\n            \\"hash\\" : BinData(0,\\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\\"),\\n            \\"keyId\\" : NumberLong(0)\\n        }\\n    }\\n}\\n```\\n\\n### Step 11 \u2013 Validate sharding status\\n\\n```javascript \\n\\n\\nmongos> sh.status()\\n--- Sharding Status ---\\n  sharding version: {\\n    \\"_id\\" : 1,\\n    \\"minCompatibleVersion\\" : 5,\\n    \\"currentVersion\\" : 6,\\n    \\"clusterId\\" : ObjectId(\\"6157efd7982782e314f1b651\\")\\n  }\\n  shards:\\n        {  \\"_id\\" : \\"rs_mongo1\\",  \\"host\\" : \\"rs_mongo1/shard1_mongo1:27017,shard1_mongo2:27017,shard1_mongo3:27017\\",  \\"state\\" : 1 }\\n        {  \\"_id\\" : \\"rs_mongo2\\",  \\"host\\" : \\"rs_mongo2/shard2_mongo1:27017,shard2_mongo2:27017,shard2_mongo3:27017\\",  \\"state\\" : 1 }\\n        {  \\"_id\\" : \\"rs_mongo3\\",  \\"host\\" : \\"rs_mongo3/shard3_mongo1:27017,shard3_mongo2:27017,shard3_mongo3:27017\\",  \\"state\\" : 1 }\\n  active mongoses:\\n        \\"4.4.8\\" : 1\\n  autosplit:\\n        Currently enabled: yes\\n  balancer:\\n        Currently enabled:  yes\\n        Currently running:  no\\n        Failed balancer rounds in last 5 attempts:  0\\n        Migration Results for the last 24 hours:\\n                682 : Success\\n  databases:\\n        {  \\"_id\\" : \\"config\\",  \\"primary\\" : \\"config\\",  \\"partitioned\\" : true }\\n                config.system.sessions\\n                        shard key: { \\"_id\\" : 1 }\\n                        unique: false\\n                        balancing: true\\n                        chunks:\\n                                rs_mongo1   342\\n                                rs_mongo2   341\\n                                rs_mongo3   341\\n                        too many chunks to print, use verbose if you want to force print\\n       employee.emp_list2\\n                        shard key: { \\"sr_no\\" : \\"hashed\\" }\\n                        unique: false\\n                        balancing: true\\n                        chunks:\\n                                rs_mongo1   2\\n                                rs_mongo2   2\\n                                rs_mongo3   \\n```\\n\\n### Step 12 - Validate chunk distribution \\n```javascript\\n\\nmongos> db.getSiblingDB(\\"employee\\").emp_list2.getShardDistribution();\\n \\nShard rs_mongo1 at rs_mongo1/shard1_mongo1:27017,shard1_mongo2:27017,shard1_mongo3:27017\\n data : 2.09MiB docs : 33426 chunks : 2\\n estimated data per chunk : 1.04MiB\\n estimated docs per chunk : 16713\\n \\nShard rs_mongo3 at rs_mongo3/shard3_mongo1:27017,shard3_mongo2:27017,shard3_mongo3:27017\\n data : 2.09MiB docs : 33379 chunks : 2\\n estimated data per chunk : 1.04MiB\\n estimated docs per chunk : 16689\\n \\nShard rs_mongo2 at rs_mongo2/shard2_mongo1:27017,shard2_mongo2:27017,shard2_mongo3:27017\\n data : 2.08MiB docs : 33195 chunks : 2\\n estimated data per chunk : 1.04MiB\\n estimated docs per chunk : 16597\\n \\nTotals\\n data : 6.28MiB docs : 100000 chunks : 6\\n Shard rs_mongo1 contains 33.42% data, 33.42% docs in cluster, avg obj size on shard : 65B\\n Shard rs_mongo3 contains 33.37% data, 33.37% docs in cluster, avg obj size on shard : 65B\\n Shard rs_mongo2 contains 33.19% data, 33.19% docs in cluster, avg \\n\\n```"},{"id":"mongodb-rs-docker-persistent-volume","metadata":{"permalink":"/mongodb-rs-docker-persistent-volume","source":"@site/blog/2021-09-18-mongodb-rs-docker-persistent-volume.md","title":"MongoDB Replicaset with Persistent Volume using Docker Compose","description":"In this article we will see the steps required to create and configure MongoDB replicaset containers on persistent volumes using Docker Compose. Compose was developed to define, configure and spin-up multi-container docker applications with single command, further reducing . Extensive usage of Docker with several container management quickly becomes cumbersome, Compose overcomes this problem and allows to easily handle multiple containers at once using YAML configuration docker-compose.yml","date":"2021-09-18T00:00:00.000Z","formattedDate":"September 18, 2021","tags":[{"label":"mongodb","permalink":"/tags/mongodb"},{"label":"docker","permalink":"/tags/docker"},{"label":"replicaset","permalink":"/tags/replicaset"},{"label":"persistent-volume","permalink":"/tags/persistent-volume"}],"readingTime":2.795,"hasTruncateMarker":true,"authors":[{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"}],"frontMatter":{"slug":"mongodb-rs-docker-persistent-volume","title":"MongoDB Replicaset with Persistent Volume using Docker Compose","authors":{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"},"tags":["mongodb","docker","replicaset","persistent-volume"]},"prevItem":{"title":"Configure Sharding in MongoDB on Docker Containers","permalink":"/sharding-mongo-docker"},"nextItem":{"title":"Create MongoDB Standalone and Replica Set containers using Docker","permalink":"/create-mongodb-docker"}},"content":"In this article we will see the steps required to create and configure MongoDB replicaset containers on **persistent volumes** using [Docker Compose](https://docs.docker.com/compose/). Compose was developed to define, configure and spin-up multi-container docker applications with single command, further reducing . Extensive usage of Docker with several container management quickly becomes cumbersome, Compose overcomes this problem and allows to easily handle multiple containers at once using YAML configuration `docker-compose.yml`\\n\\n\x3c!--truncate--\x3e\\n\\n## Docker Compose Steps\\n\\n### Step 1: System Configuration\\n\\nTo run Compose, make sure you have installed Compose on your local system where Docker is installed. The Compose setup and installation instructions can be found here.\\n\\n### Step 2: Ensure mongo_net network bridge is already existing\\n\\n```shell\\n$ docker network create mongo_net\\n$ docker network inspect mongo_net                       \\n```\\n### Step 3: Lets convert the below command as seen in previous blog post to docker-compose.yml. If you are new to Docker and drafting compose files try using composerize to convert docker run commands into compose YAML output\\n\\n```shell \\n$ docker run -d -p 20003:27017 --name mongo3 --network mongo_net mongo:4.4.9-rc0 mongod --replSet rs_mongo\\n```\\nThere are few additional attributes passed in the `docker-compose.yml`. The difference in the options passed in the command line above and `docker-compose.yml` is as below\\n\\n- image: custom image uploaded to docker hub with additional utilities installed on ubuntu build\\nhostname: container host name\\n- volumes: map directory on the host file system to manage and store container data. In the below YAML i use separate directory for all 3 MongoDB replicaset. This helps in creating persistent data store for docker containers and doesn\u2019t bloat the container runtime instance.\\n- Pass mongod configuration options through file mongod.conf\\n\\nCreate the below YAML compose file in your favourite editor, i have been using Visual Studio Code. Save the file as docker-compose.yml\\n\\n\\n```shell\\n$ code .\\n\\n``` \\n\\n```yaml\\n#version: \\"3.3\\"\\nservices:\\n  mongo_1:\\n    image: ivishalgandhi/mongo-custom:latest\\n    hostname: mongo_1\\n    container_name: mongo_1\\n    volumes:\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_1/mongod.conf:/etc/mongod.conf\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_1/initdb.d/:/docker-entrypoint-initdb.d/\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_1/data/db/:/data/db/\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_1/log/:/var/log/mongodb/\\n    ports:\\n      - 20003:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\",\\"--replSet\\", \\"rs_mongo\\"]\\n    network_mode: mongo_net\\n \\n  mongo_2:\\n    image: ivishalgandhi/mongo-custom:latest\\n    hostname: mongo_2\\n    container_name: mongo_2\\n    volumes:\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_2/mongod.conf:/etc/mongod.conf\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_2/initdb.d/:/docker-entrypoint-initdb.d/\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_2/data/db/:/data/db/\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_2/log/:/var/log/mongodb/\\n    ports:\\n      - 20004:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\",\\"--replSet\\", \\"rs_mongo\\"]\\n    network_mode: mongo_net\\n \\n  mongo_3:\\n    image: ivishalgandhi/mongo-custom:latest\\n    hostname: mongo_3\\n    container_name: mongo_3\\n    volumes:\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_3/mongod.conf:/etc/mongod.conf\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_3/initdb.d/:/docker-entrypoint-initdb.d/\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_3/data/db/:/data/db/\\n      - /Users/vishalgandhi/learning/docker/mongo_replset/mongo_3/log/:/var/log/mongodb/\\n    ports:\\n      - 20005:27017\\n    command: [\\"-f\\", \\"/etc/mongod.conf\\",\\"--replSet\\", \\"rs_mongo\\"]\\n    network_mode: mongo_net\\n\\n```\\n\\n### Step 4: create mongod.conf\\n\\n```\\n$  code .\\n\\n```\\n\\n```YAML \\n# mongod.conf\\n \\n# for documentation of all options, see:\\n#   http://docs.mongodb.org/manual/reference/configuration-options/\\n \\n# where to write logging data.\\nsystemLog:\\n  destination: file\\n  logAppend: true\\n  path: /var/log/mongodb/mongod.log\\n \\n# Where and how to store data.\\nstorage:\\n  dbPath: /data/db\\n  journal:\\n    enabled: true\\n  engine:  wiredTiger\\n \\n# network interfaces\\nnet:\\n  port: 27017\\n  bindIp: 127.0.0.1  \\n```\\n\\n### Step 5: Spin-up replicaset containers\\n\\n```shell \\n$ docker compose up -d\\n[+] Running 3/3\\n \u283f Container mongo_2  Created                                                                                                                                   0.2s\\n \u283f Container mongo_1  Created                                                                                                                                     0.2s\\n \u283f Container mongo_3  Created\\n```\\n\\n### Step 6: Initiate replicaset\\n\\n```shell\\n$ docker exec -it mongo_1 bash\\n\\nroot@mongo_1:/# mongo\\nrs_mongo:SECONDARY> rs.initiate(\\n   {\\n      _id: \u201crs_mongo\u201d,\\n      version: 1,\\n      members: [\\n         { _id: 0, host : \u201cmongo_1:27017\u201d },\\n         { _id: 1, host : \u201cmongo_2:27017\u201d },\\n         { _id: 2, host : \u201cmongo_3:27017\u201d }\\n      ]\\n   }\\n)\\n \\nrs_mongo:SECONDARY> db.isMaster() \\n{\\n    \\"topologyVersion\\" : {\\n        \\"processId\\" : ObjectId(\\"614615744d54c08963ef67f6\\"),\\n        \\"counter\\" : NumberLong(6)\\n    },\\n    \\"hosts\\" : [\\n        \\"mongo_1:27017\\",\\n        \\"mongo_2:27017\\",\\n        \\"mongo_3:27017\\"\\n    ],\\n    \\"setName\\" : \\"rs_mongo\\",\\n    \\"setVersion\\" : 1,\\n    \\"ismaster\\" : true,\\n    \\"secondary\\" : false,\\n    \\"primary\\" : \\"mongo_2:27017\\",\\n    \\"me\\" : \\"mongo_2:27017\\",\\n\\n```"},{"id":"create-mongodb-docker","metadata":{"permalink":"/create-mongodb-docker","source":"@site/blog/2021-09-12-create-mongodb-docker.md","title":"Create MongoDB Standalone and Replica Set containers using Docker","description":"Docker Containers offer easy setup, customization and scalability. In this article, i will walk you through how to use Docker to setup MongoDB standalone and replica set containers within minutes.","date":"2021-09-12T00:00:00.000Z","formattedDate":"September 12, 2021","tags":[{"label":"mongodb","permalink":"/tags/mongodb"},{"label":"containers","permalink":"/tags/containers"},{"label":"docker","permalink":"/tags/docker"},{"label":"mongo-replicaset","permalink":"/tags/mongo-replicaset"}],"readingTime":4.65,"hasTruncateMarker":true,"authors":[{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"}],"frontMatter":{"slug":"create-mongodb-docker","title":"Create MongoDB Standalone and Replica Set containers using Docker","authors":{"name":"Vishal Gandhi","url":"https://github.com/ivishalgandhi","image_url":"https://github.com/ivishalgandhi.png","imageURL":"https://github.com/ivishalgandhi.png"},"tags":["mongodb","containers","docker","mongo-replicaset"]},"prevItem":{"title":"MongoDB Replicaset with Persistent Volume using Docker Compose","permalink":"/mongodb-rs-docker-persistent-volume"}},"content":"Docker Containers offer easy setup, customization and scalability. In this article, i will walk you through how to use Docker to setup MongoDB standalone and replica set containers within minutes.\\n\\nThe article is divided in two parts, the first part is setting up the standalone MongoDB container and second part is setting up and grouping MongoDB containers as member of replica set with Docker.\\n\\nLet\u2019s get started.\\n\\n\x3c!--truncate--\x3e\\n\\n## System Configuration\\n\\nTo run this setup, Docker Engine is required to be installed on the system. Follow the official documentation to setup Docker Engine on your system.\\n\\n:::caution\\n\\nThe steps and configuration for both standalone and replica set is not to be used for production deployment. The intended use is only for setting up a environment to support learning of MongoDB.\\n\\n:::\\n\\n## Standalone MongoDB Setup\\n\\n* Pull the Docker MongoDB official image from Docker Hub. The following code snippet demonstrates pulling the docker MongoDB 4.4.9 release. To pull the MongoDB 5.0 latest release replace :4.4.9-rc0 with :latest tag\\n\\n```shell \\n\\n$ docker pull mongo:4.4.9-rc0 \\n\\n```\\n\\n* To check if the the image pull from Docker Hub was successful\\n\\n\\n```\\n\\n$ docker images                                                   \\nREPOSITORY   TAG         IMAGE ID       CREATED       SIZE\\nmongo        4.4.9-rc0   24599d6cde30   9 days ago    413MB\\nmongo        latest      31299b956c79   10 days ago   642MB\\n\\n```\\n\\n* Lets start first standalone container \u2013 the below command starts MongoDB docker container with name mongo_449 in detached mode using the 4.4.9-rc0 image\\n\\n```shell\\n\\n$ docker run --name mongo_449 -d mongo:4.4.9-rc0\\n\\n```\\n\\n* List the container status and health by executing\\n\\n```shell\\n\\n$ docker container ls -a\\n\\nCONTAINER ID   IMAGE          COMMAND                  CREATED       STATUS                      PORTS       NAMES\\n96e64ec525a2   24599d6cde30   \\"docker-entrypoint.s\u2026\\"   2 hours ago   Up 33 minutes               27017/tcp   mongo_449\\n\\n```\\n\\n* To run a command inside the container\\n  * docker exec: interact with containers (running/up mode)\\n  * -i : interactive STDIN open even if not attached to the container\\n  * -t: pseudo TTY\\n\\n\\n* Connect to MongoDB daemon\\n\\n```shell\\nroot@96e64ec525a2:/# mongo\\n\\nMongoDB shell version v4.4.9-rc0\\nconnecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb\\nImplicit session: session { \\"id\\" : UUID(\\"ac624a79-908b-4580-90ae-22d0a7aee07a\\") }\\nMongoDB server version: 4.4.9-rc0\\n\\n```\\n\\n* Install utilities. The utilities ping, systemctl, sudo installed in the containers can be used for troubleshooting during the setup of Docker containers.\\n\\n```shell\\n\\nroot@96e64ec525a2:/# apt-get install iputils-ping\u0335\\nroot@96e64ec525a2:/# apt-get install sudo \\nroot@96e64ec525a2:/# apt-get install systemctl\\n\\n```\\n\\nThis finishes the setup of standalone MongoDB Container. Now let\u2019s look at ReplicaSet setup.\\n\\n## Creating MongoDB ReplicaSet using Docker\\n\\nA replica set consists of a primary node together with two or more secondary nodes. It is recommended to group three or more nodes, with an odd number of total nodes. The primary node accepts all the write requests which are propagated synchronously or asynchronously to the secondary nodes. Below are the steps required to complete the replica set setup using Docker.\\n\\nCreate a new network(bridge) within Docker. The replica set containers will be mapped to the new network.\\n\\n```shell \\n$ docker network create mongo_net\\n$ docker network inspect mongo_net                       \\n[\\n    {\\n        \\"Name\\": \\"mongo_net\\",\\n        \\"Id\\": \\"e2567806642a9245436371a9b9904c71fadae969fbd11a7bb8203e07976b1b2a\\",\\n        \\"Created\\": \\"2021-09-11T00:36:33.989688708Z\\",\\n        \\"Scope\\": \\"local\\",\\n        \\"Driver\\": \\"bridge\\",\\n        \\"EnableIPv6\\": false,\\n        \\"IPAM\\": {\\n            \\"Driver\\": \\"default\\",\\n            \\"Options\\": {},\\n            \\"Config\\": [\\n                {\\n                    \\"Subnet\\": \\"172.18.0.0/16\\",\\n                    \\"Gateway\\": \\"172.18.0.1\\"\\n                }\\n            ]\\n        },\\n...\\n]\\n```\\n\\n* Start 3 containers \u2013 Primary Secondary Secondary\\n  * Break down of parameters docker run : start a new container\\n    * `-d` :  run the container in detached mode\\n    * `-p 20001:27017` publish container port to the host and bind 27017 to 20001 on the host. This is useful if connecting mongo client like mongosh to container\\n    * `--name` : name of the mongo container\\n    * `-- network` : connect to user created network mongo_net\\n    * `mongo:4.4.9-rc0` : Docker MongoDB image\\n    * `mongod --replSet rs_mongo` : run the mongod daemon and add the container to replica set name rs_mongo\\n\\n```shell \\n$ docker run -d -p 20001:27017 --name mongo1 --network mongo_net mongo:4.4.9-rc0 mongod --replSet rs_mongo\\n$ docker run -d -p 20002:27017 --name mongo2 --network mongo_net mongo:4.4.9-rc0 mongod --replSet rs_mongo\\n$ docker run -d -p 20003:27017 --name mongo3 --network mongo_net mongo:4.4.9-rc0 mongod --replSet rs_mongo\\n```\\n\\n* Set up Replica set. Connect to one of the containers and run the below commands. The container that receives the initiate will pass on the configuration to other containers assigned as members.\\n\\n```js\\nrs_mongo [direct: primary] test_2> config = {\\n      \\"_id\\" : \\"rs_mongo\\",\\n      \\"members\\" : [\\n          {\\n              \\"_id\\" : 0,\\n              \\"host\\" : \\"mongo1:27017\\"\\n          },\\n          {\\n              \\"_id\\" : 1,\\n              \\"host\\" : \\"mongo2:27017\\"\\n          },\\n          {\\n              \\"_id\\" : 2,\\n              \\"host\\" : \\"mongo3:27017\\"\\n          }\\n      ]\\n  }\\n\\nrs_mongo [direct: primary] admin> rs.initiate(config)\\n\\n//Insert test data\\n\\nrs_mongo [direct: primary] admin> use test_2\\nrs_mongo [direct: primary] test_2> db.employees.insert({name: \\"vishal\\")\\n\\n//To read queries on secondary run setReadPref. \\nrs_mongo [direct: secondary] test_2>db.getMongo().setReadPref(\'secondary\')\\n\\nrs_mongo [direct: secondary] test_2> db.employees.find()\\n[\\n  { _id: ObjectId(\\"613c99801ea796508e3c73f5\\"), name: \'vishal\' }\\n]\\n\\n```\\n\\n* Validate Replica Set Configuration\\n\\n```js\\nrs_mongo [direct: primary] test_2> db.printReplicationInfo()\\n\\nconfigured oplog size\\n\'557174 MB\'\\n---\\nlog length start to end\\n\'71372 secs (19.83 hrs)\'\\n---\\noplog first event time\\n\'Sat Sep 11 2021 15:47:21 GMT+0530 (India Standard Time)\'\\n---\\noplog last event time\\n\'Sun Sep 12 2021 11:36:53 GMT+0530 (India Standard Time)\'\\n---\\nnow\\n\'Sun Sep 12 2021 11:36:54 GMT+0530 (India Standard Time)\'\\n\\n\\nrs_mongo [direct: primary] test_2> rs.conf()\\n{\\n  _id: \'rs_mongo\',\\n  version: 1,\\n  term: 1,\\n  protocolVersion: Long(\\"1\\"),\\n  writeConcernMajorityJournalDefault: true,\\n  members: [\\n    {\\n      _id: 0,\\n      host: \'mongo1:27017\',\\n      arbiterOnly: false,\\n      buildIndexes: true,\\n      hidden: false,\\n      priority: 1,\\n      tags: {},\\n      slaveDelay: Long(\\"0\\"),\\n      votes: 1\\n    },\\n    {\\n      _id: 1,\\n      host: \'mongo2:27017\',\\n      arbiterOnly: false,\\n      buildIndexes: true,\\n      hidden: false,\\n      priority: 1,\\n      tags: {},\\n      slaveDelay: Long(\\"0\\"),\\n      votes: 1\\n    },\\n    {\\n      _id: 2,\\n      host: \'mongo3:27017\',\\n      arbiterOnly: false,\\n      buildIndexes: true,\\n      hidden: false,\\n      priority: 1,\\n      tags: {},\\n      slaveDelay: Long(\\"0\\"),\\n      votes: 1\\n    }\\n\\n```\\nThat concludes this article."}]}')}}]);